package com.tangem.lib.visa;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.StaticStruct;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes1;
import org.web3j.abi.datatypes.generated.Bytes16;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint16;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint64;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.6.1.
 */
@SuppressWarnings("rawtypes")
public class TangemPaymentAccount extends Contract {
    public static final String BINARY = "";

    private static String librariesLinkedBinary;

    public static final String FUNC_UPGRADE_INTERFACE_VERSION = "UPGRADE_INTERFACE_VERSION";

    public static final String FUNC_ACTIVECARDADDRESSES = "activeCardAddresses";

    public static final String FUNC_ADDCARD = "addCard";

    public static final String FUNC_AUTHLIMITMARGIN = "authLimitMargin";

    public static final String FUNC_AUTHORIZEDTRANSACTIONS = "authorizedTransactions";

    public static final String FUNC_AVAILABLEFORDEBTPAYMENT = "availableForDebtPayment";

    public static final String FUNC_AVAILABLEFORPAYMENT = "availableForPayment";

    public static final String FUNC_AVAILABLEFORWITHDRAWAL = "availableForWithdrawal";

    public static final String FUNC_BLOCKEDAMOUNT = "blockedAmount";

    public static final String FUNC_CANCELWITHDRAWAL = "cancelWithdrawal";

    public static final String FUNC_CARDCONFIRMATIONNONCE = "cardConfirmationNonce";

    public static final String FUNC_CARDS = "cards";

    public static final String FUNC_DEBTAMOUNT = "debtAmount";

    public static final String FUNC_DISABLECARD = "disableCard";

    public static final String FUNC_EIP712DOMAIN = "eip712Domain";

    public static final String FUNC_ENABLECARD = "enableCard";

    public static final String FUNC_FACTORY = "factory";

    public static final String FUNC_INCREASEVERIFIEDBALANCE = "increaseVerifiedBalance";

    public static final String FUNC_INITWITHDRAWAL = "initWithdrawal";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_ISTRUSTEDFORWARDER = "isTrustedForwarder";

    public static final String FUNC_ISWITHDRAWALINPROGRESS = "isWithdrawalInProgress";

    public static final String FUNC_ISWITHDRAWALREADY = "isWithdrawalReady";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_OWNERSHIPACCEPTANCENONCE = "ownershipAcceptanceNonce";

    public static final String FUNC_PAYDEBT = "payDebt";

    public static final String FUNC_PAYMENTTOKEN = "paymentToken";

    public static final String FUNC_PROCESSAUTHORIZATIONCHANGE = "processAuthorizationChange";

    public static final String FUNC_PROCESSDEBT = "processDebt";

    public static final String FUNC_PROCESSNOCONFIRMATIONAUTHORIZATION = "processNoConfirmationAuthorization";

    public static final String FUNC_PROCESSOTPAUTHORIZATION = "processOtpAuthorization";

    public static final String FUNC_PROCESSREFUNDPAYMENT = "processRefundPayment";

    public static final String FUNC_PROCESSSETTLEMENT = "processSettlement";

    public static final String FUNC_PROCESSSIGNATUREAUTHORIZATION = "processSignatureAuthorization";

    public static final String FUNC_PROCESSUNSETTLEDTRANSACTION = "processUnsettledTransaction";

    public static final String FUNC_PROCESSWITHDRAWAL = "processWithdrawal";

    public static final String FUNC_PROCESSOR = "processor";

    public static final String FUNC_PROXIABLEUUID = "proxiableUUID";

    public static final String FUNC_REGISTRY = "registry";

    public static final String FUNC_REMOVEOWNER = "removeOwner";

    public static final String FUNC_SECURITYDELAY = "securityDelay";

    public static final String FUNC_SETAUTHLIMITMARGIN = "setAuthLimitMargin";

    public static final String FUNC_SETCARDISOWNER = "setCardIsOwner";

    public static final String FUNC_SETLIMITS = "setLimits";

    public static final String FUNC_SETOTPSTATE = "setOtpState";

    public static final String FUNC_SETOWNER = "setOwner";

    public static final String FUNC_SETVERIFIEDBALANCE = "setVerifiedBalance";

    public static final String FUNC_TRANSACTIONCONFIRMATIONNONCE = "transactionConfirmationNonce";

    public static final String FUNC_TRUSTEDFORWARDER = "trustedForwarder";

    public static final String FUNC_UPGRADETOANDCALL = "upgradeToAndCall";

    public static final String FUNC_VERIFIEDBALANCE = "verifiedBalance";

    public static final String FUNC_WITHDRAWALADDRESS = "withdrawalAddress";

    public static final String FUNC_WITHDRAWALAMOUNT = "withdrawalAmount";

    public static final String FUNC_WITHDRAWALREADYTIMESTAMP = "withdrawalReadyTimestamp";

    public static final String FUNC_WRITEOFFDEBT = "writeOffDebt";

    public static final Event ACCOUNTSTATEAFTERSETTLEMENT_EVENT = new Event("AccountStateAfterSettlement",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event AUTHLIMITMARGINSET_EVENT = new Event("AuthLimitMarginSet",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event CARDADDED_EVENT = new Event("CardAdded",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<CardParams>() {}));
    ;

    public static final Event CARDDISABLED_EVENT = new Event("CardDisabled",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event CARDENABLED_EVENT = new Event("CardEnabled",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event DEBTINCREASED_EVENT = new Event("DebtIncreased",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DEBTPAID_EVENT = new Event("DebtPaid",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DEBTWRITTENOFF_EVENT = new Event("DebtWrittenOff",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event EIP712DOMAINCHANGED_EVENT = new Event("EIP712DomainChanged",
            Arrays.<TypeReference<?>>asList());
    ;

    public static final Event INITIALIZED_EVENT = new Event("Initialized",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}));
    ;

    public static final Event INSUFFICIENTFUNDSONFORCEDAUTH_EVENT = new Event("InsufficientFundsOnForcedAuth",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event LIMITSSET_EVENT = new Event("LimitsSet",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<LimitsParams>() {}));
    ;

    public static final Event OTPSTATESET_EVENT = new Event("OtpStateSet",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<OtpState>() {}));
    ;

    public static final Event OWNERREMOVED_EVENT = new Event("OwnerRemoved",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event OWNERSET_EVENT = new Event("OwnerSet",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event PROCESSORSET_EVENT = new Event("ProcessorSet",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event REFUNDPAID_EVENT = new Event("RefundPaid",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event TRANSACTIONAMOUNTCHANGED_EVENT = new Event("TransactionAmountChanged",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event TRANSACTIONAUTHORIZEDNOCONFIRMATION_EVENT = new Event("TransactionAuthorizedNoConfirmation",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event TRANSACTIONAUTHORIZEDWITHOTP_EVENT = new Event("TransactionAuthorizedWithOtp",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes16>() {}, new TypeReference<Uint16>() {}));
    ;

    public static final Event TRANSACTIONAUTHORIZEDWITHSIGNATURE_EVENT = new Event("TransactionAuthorizedWithSignature",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event TRANSACTIONSETTLED_EVENT = new Event("TransactionSettled",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event UNSETTLEDTRANSACTIONUNBLOCKED_EVENT = new Event("UnsettledTransactionUnblocked",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event UPGRADED_EVENT = new Event("Upgraded",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event VERIFIEDBALANCEINCREASED_EVENT = new Event("VerifiedBalanceIncreased",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event VERIFIEDBALANCESET_EVENT = new Event("VerifiedBalanceSet",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event WITHDRAWALCANCELED_EVENT = new Event("WithdrawalCanceled",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event WITHDRAWALCOMPLETE_EVENT = new Event("WithdrawalComplete",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event WITHDRAWALINITIATED_EVENT = new Event("WithdrawalInitiated",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected TangemPaymentAccount(String contractAddress, Web3j web3j, Credentials credentials,
                                   BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected TangemPaymentAccount(String contractAddress, Web3j web3j, Credentials credentials,
                                   ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected TangemPaymentAccount(String contractAddress, Web3j web3j,
                                   TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected TangemPaymentAccount(String contractAddress, Web3j web3j,
                                   TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<AccountStateAfterSettlementEventResponse> getAccountStateAfterSettlementEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ACCOUNTSTATEAFTERSETTLEMENT_EVENT, transactionReceipt);
        ArrayList<AccountStateAfterSettlementEventResponse> responses = new ArrayList<AccountStateAfterSettlementEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AccountStateAfterSettlementEventResponse typedResponse = new AccountStateAfterSettlementEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.balance = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.blockedAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.debtTotal = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static AccountStateAfterSettlementEventResponse getAccountStateAfterSettlementEventFromLog(
            Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ACCOUNTSTATEAFTERSETTLEMENT_EVENT, log);
        AccountStateAfterSettlementEventResponse typedResponse = new AccountStateAfterSettlementEventResponse();
        typedResponse.log = log;
        typedResponse.balance = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.blockedAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.debtTotal = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<AccountStateAfterSettlementEventResponse> accountStateAfterSettlementEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAccountStateAfterSettlementEventFromLog(log));
    }

    public Flowable<AccountStateAfterSettlementEventResponse> accountStateAfterSettlementEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ACCOUNTSTATEAFTERSETTLEMENT_EVENT));
        return accountStateAfterSettlementEventFlowable(filter);
    }

    public static List<AuthLimitMarginSetEventResponse> getAuthLimitMarginSetEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(AUTHLIMITMARGINSET_EVENT, transactionReceipt);
        ArrayList<AuthLimitMarginSetEventResponse> responses = new ArrayList<AuthLimitMarginSetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AuthLimitMarginSetEventResponse typedResponse = new AuthLimitMarginSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.authLimitMargin = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static AuthLimitMarginSetEventResponse getAuthLimitMarginSetEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(AUTHLIMITMARGINSET_EVENT, log);
        AuthLimitMarginSetEventResponse typedResponse = new AuthLimitMarginSetEventResponse();
        typedResponse.log = log;
        typedResponse.authLimitMargin = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<AuthLimitMarginSetEventResponse> authLimitMarginSetEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAuthLimitMarginSetEventFromLog(log));
    }

    public Flowable<AuthLimitMarginSetEventResponse> authLimitMarginSetEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(AUTHLIMITMARGINSET_EVENT));
        return authLimitMarginSetEventFlowable(filter);
    }

    public static List<CardAddedEventResponse> getCardAddedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(CARDADDED_EVENT, transactionReceipt);
        ArrayList<CardAddedEventResponse> responses = new ArrayList<CardAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CardAddedEventResponse typedResponse = new CardAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.cardAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.cardData = (CardParams) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public static CardAddedEventResponse getCardAddedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(CARDADDED_EVENT, log);
        CardAddedEventResponse typedResponse = new CardAddedEventResponse();
        typedResponse.log = log;
        typedResponse.cardAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.cardData = (CardParams) eventValues.getNonIndexedValues().get(1);
        return typedResponse;
    }

    public Flowable<CardAddedEventResponse> cardAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getCardAddedEventFromLog(log));
    }

    public Flowable<CardAddedEventResponse> cardAddedEventFlowable(DefaultBlockParameter startBlock,
                                                                   DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CARDADDED_EVENT));
        return cardAddedEventFlowable(filter);
    }

    public static List<CardDisabledEventResponse> getCardDisabledEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(CARDDISABLED_EVENT, transactionReceipt);
        ArrayList<CardDisabledEventResponse> responses = new ArrayList<CardDisabledEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CardDisabledEventResponse typedResponse = new CardDisabledEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.card = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static CardDisabledEventResponse getCardDisabledEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(CARDDISABLED_EVENT, log);
        CardDisabledEventResponse typedResponse = new CardDisabledEventResponse();
        typedResponse.log = log;
        typedResponse.card = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<CardDisabledEventResponse> cardDisabledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getCardDisabledEventFromLog(log));
    }

    public Flowable<CardDisabledEventResponse> cardDisabledEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CARDDISABLED_EVENT));
        return cardDisabledEventFlowable(filter);
    }

    public static List<CardEnabledEventResponse> getCardEnabledEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(CARDENABLED_EVENT, transactionReceipt);
        ArrayList<CardEnabledEventResponse> responses = new ArrayList<CardEnabledEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CardEnabledEventResponse typedResponse = new CardEnabledEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.card = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.isOwner = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static CardEnabledEventResponse getCardEnabledEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(CARDENABLED_EVENT, log);
        CardEnabledEventResponse typedResponse = new CardEnabledEventResponse();
        typedResponse.log = log;
        typedResponse.card = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.isOwner = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<CardEnabledEventResponse> cardEnabledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getCardEnabledEventFromLog(log));
    }

    public Flowable<CardEnabledEventResponse> cardEnabledEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CARDENABLED_EVENT));
        return cardEnabledEventFlowable(filter);
    }

    public static List<DebtIncreasedEventResponse> getDebtIncreasedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(DEBTINCREASED_EVENT, transactionReceipt);
        ArrayList<DebtIncreasedEventResponse> responses = new ArrayList<DebtIncreasedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DebtIncreasedEventResponse typedResponse = new DebtIncreasedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.increase = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.debtAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static DebtIncreasedEventResponse getDebtIncreasedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(DEBTINCREASED_EVENT, log);
        DebtIncreasedEventResponse typedResponse = new DebtIncreasedEventResponse();
        typedResponse.log = log;
        typedResponse.increase = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.debtAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<DebtIncreasedEventResponse> debtIncreasedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getDebtIncreasedEventFromLog(log));
    }

    public Flowable<DebtIncreasedEventResponse> debtIncreasedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEBTINCREASED_EVENT));
        return debtIncreasedEventFlowable(filter);
    }

    public static List<DebtPaidEventResponse> getDebtPaidEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(DEBTPAID_EVENT, transactionReceipt);
        ArrayList<DebtPaidEventResponse> responses = new ArrayList<DebtPaidEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DebtPaidEventResponse typedResponse = new DebtPaidEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.paid = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.debtLeft = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static DebtPaidEventResponse getDebtPaidEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(DEBTPAID_EVENT, log);
        DebtPaidEventResponse typedResponse = new DebtPaidEventResponse();
        typedResponse.log = log;
        typedResponse.paid = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.debtLeft = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<DebtPaidEventResponse> debtPaidEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getDebtPaidEventFromLog(log));
    }

    public Flowable<DebtPaidEventResponse> debtPaidEventFlowable(DefaultBlockParameter startBlock,
                                                                 DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEBTPAID_EVENT));
        return debtPaidEventFlowable(filter);
    }

    public static List<DebtWrittenOffEventResponse> getDebtWrittenOffEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(DEBTWRITTENOFF_EVENT, transactionReceipt);
        ArrayList<DebtWrittenOffEventResponse> responses = new ArrayList<DebtWrittenOffEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DebtWrittenOffEventResponse typedResponse = new DebtWrittenOffEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.writtenOff = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.debtLeft = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static DebtWrittenOffEventResponse getDebtWrittenOffEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(DEBTWRITTENOFF_EVENT, log);
        DebtWrittenOffEventResponse typedResponse = new DebtWrittenOffEventResponse();
        typedResponse.log = log;
        typedResponse.writtenOff = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.debtLeft = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<DebtWrittenOffEventResponse> debtWrittenOffEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getDebtWrittenOffEventFromLog(log));
    }

    public Flowable<DebtWrittenOffEventResponse> debtWrittenOffEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEBTWRITTENOFF_EVENT));
        return debtWrittenOffEventFlowable(filter);
    }

    public static List<EIP712DomainChangedEventResponse> getEIP712DomainChangedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(EIP712DOMAINCHANGED_EVENT, transactionReceipt);
        ArrayList<EIP712DomainChangedEventResponse> responses = new ArrayList<EIP712DomainChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            EIP712DomainChangedEventResponse typedResponse = new EIP712DomainChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static EIP712DomainChangedEventResponse getEIP712DomainChangedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(EIP712DOMAINCHANGED_EVENT, log);
        EIP712DomainChangedEventResponse typedResponse = new EIP712DomainChangedEventResponse();
        typedResponse.log = log;
        return typedResponse;
    }

    public Flowable<EIP712DomainChangedEventResponse> eIP712DomainChangedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getEIP712DomainChangedEventFromLog(log));
    }

    public Flowable<EIP712DomainChangedEventResponse> eIP712DomainChangedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EIP712DOMAINCHANGED_EVENT));
        return eIP712DomainChangedEventFlowable(filter);
    }

    public static List<InitializedEventResponse> getInitializedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(INITIALIZED_EVENT, transactionReceipt);
        ArrayList<InitializedEventResponse> responses = new ArrayList<InitializedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InitializedEventResponse typedResponse = new InitializedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.version = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static InitializedEventResponse getInitializedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(INITIALIZED_EVENT, log);
        InitializedEventResponse typedResponse = new InitializedEventResponse();
        typedResponse.log = log;
        typedResponse.version = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<InitializedEventResponse> initializedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getInitializedEventFromLog(log));
    }

    public Flowable<InitializedEventResponse> initializedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INITIALIZED_EVENT));
        return initializedEventFlowable(filter);
    }

    public static List<InsufficientFundsOnForcedAuthEventResponse> getInsufficientFundsOnForcedAuthEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(INSUFFICIENTFUNDSONFORCEDAUTH_EVENT, transactionReceipt);
        ArrayList<InsufficientFundsOnForcedAuthEventResponse> responses = new ArrayList<InsufficientFundsOnForcedAuthEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InsufficientFundsOnForcedAuthEventResponse typedResponse = new InsufficientFundsOnForcedAuthEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.transactionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.card = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.insufficientAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static InsufficientFundsOnForcedAuthEventResponse getInsufficientFundsOnForcedAuthEventFromLog(
            Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(INSUFFICIENTFUNDSONFORCEDAUTH_EVENT, log);
        InsufficientFundsOnForcedAuthEventResponse typedResponse = new InsufficientFundsOnForcedAuthEventResponse();
        typedResponse.log = log;
        typedResponse.transactionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.card = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.insufficientAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<InsufficientFundsOnForcedAuthEventResponse> insufficientFundsOnForcedAuthEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getInsufficientFundsOnForcedAuthEventFromLog(log));
    }

    public Flowable<InsufficientFundsOnForcedAuthEventResponse> insufficientFundsOnForcedAuthEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INSUFFICIENTFUNDSONFORCEDAUTH_EVENT));
        return insufficientFundsOnForcedAuthEventFlowable(filter);
    }

    public static List<LimitsSetEventResponse> getLimitsSetEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(LIMITSSET_EVENT, transactionReceipt);
        ArrayList<LimitsSetEventResponse> responses = new ArrayList<LimitsSetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LimitsSetEventResponse typedResponse = new LimitsSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.card = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.limitsParams = (LimitsParams) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public static LimitsSetEventResponse getLimitsSetEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(LIMITSSET_EVENT, log);
        LimitsSetEventResponse typedResponse = new LimitsSetEventResponse();
        typedResponse.log = log;
        typedResponse.card = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.limitsParams = (LimitsParams) eventValues.getNonIndexedValues().get(1);
        return typedResponse;
    }

    public Flowable<LimitsSetEventResponse> limitsSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getLimitsSetEventFromLog(log));
    }

    public Flowable<LimitsSetEventResponse> limitsSetEventFlowable(DefaultBlockParameter startBlock,
                                                                   DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LIMITSSET_EVENT));
        return limitsSetEventFlowable(filter);
    }

    public static List<OtpStateSetEventResponse> getOtpStateSetEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OTPSTATESET_EVENT, transactionReceipt);
        ArrayList<OtpStateSetEventResponse> responses = new ArrayList<OtpStateSetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OtpStateSetEventResponse typedResponse = new OtpStateSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.card = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.otpState = (OtpState) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OtpStateSetEventResponse getOtpStateSetEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OTPSTATESET_EVENT, log);
        OtpStateSetEventResponse typedResponse = new OtpStateSetEventResponse();
        typedResponse.log = log;
        typedResponse.card = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.otpState = (OtpState) eventValues.getNonIndexedValues().get(1);
        return typedResponse;
    }

    public Flowable<OtpStateSetEventResponse> otpStateSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOtpStateSetEventFromLog(log));
    }

    public Flowable<OtpStateSetEventResponse> otpStateSetEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OTPSTATESET_EVENT));
        return otpStateSetEventFlowable(filter);
    }

    public static List<OwnerRemovedEventResponse> getOwnerRemovedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERREMOVED_EVENT, transactionReceipt);
        ArrayList<OwnerRemovedEventResponse> responses = new ArrayList<OwnerRemovedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnerRemovedEventResponse typedResponse = new OwnerRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnerRemovedEventResponse getOwnerRemovedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERREMOVED_EVENT, log);
        OwnerRemovedEventResponse typedResponse = new OwnerRemovedEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<OwnerRemovedEventResponse> ownerRemovedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnerRemovedEventFromLog(log));
    }

    public Flowable<OwnerRemovedEventResponse> ownerRemovedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERREMOVED_EVENT));
        return ownerRemovedEventFlowable(filter);
    }

    public static List<OwnerSetEventResponse> getOwnerSetEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSET_EVENT, transactionReceipt);
        ArrayList<OwnerSetEventResponse> responses = new ArrayList<OwnerSetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnerSetEventResponse typedResponse = new OwnerSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnerSetEventResponse getOwnerSetEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSET_EVENT, log);
        OwnerSetEventResponse typedResponse = new OwnerSetEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<OwnerSetEventResponse> ownerSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnerSetEventFromLog(log));
    }

    public Flowable<OwnerSetEventResponse> ownerSetEventFlowable(DefaultBlockParameter startBlock,
                                                                 DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSET_EVENT));
        return ownerSetEventFlowable(filter);
    }

    public static List<ProcessorSetEventResponse> getProcessorSetEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PROCESSORSET_EVENT, transactionReceipt);
        ArrayList<ProcessorSetEventResponse> responses = new ArrayList<ProcessorSetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ProcessorSetEventResponse typedResponse = new ProcessorSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.processor = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.paymentToken = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ProcessorSetEventResponse getProcessorSetEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(PROCESSORSET_EVENT, log);
        ProcessorSetEventResponse typedResponse = new ProcessorSetEventResponse();
        typedResponse.log = log;
        typedResponse.processor = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.paymentToken = (String) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<ProcessorSetEventResponse> processorSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getProcessorSetEventFromLog(log));
    }

    public Flowable<ProcessorSetEventResponse> processorSetEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PROCESSORSET_EVENT));
        return processorSetEventFlowable(filter);
    }

    public static List<RefundPaidEventResponse> getRefundPaidEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(REFUNDPAID_EVENT, transactionReceipt);
        ArrayList<RefundPaidEventResponse> responses = new ArrayList<RefundPaidEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RefundPaidEventResponse typedResponse = new RefundPaidEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.transactionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.card = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RefundPaidEventResponse getRefundPaidEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(REFUNDPAID_EVENT, log);
        RefundPaidEventResponse typedResponse = new RefundPaidEventResponse();
        typedResponse.log = log;
        typedResponse.transactionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.card = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<RefundPaidEventResponse> refundPaidEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRefundPaidEventFromLog(log));
    }

    public Flowable<RefundPaidEventResponse> refundPaidEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REFUNDPAID_EVENT));
        return refundPaidEventFlowable(filter);
    }

    public static List<TransactionAmountChangedEventResponse> getTransactionAmountChangedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSACTIONAMOUNTCHANGED_EVENT, transactionReceipt);
        ArrayList<TransactionAmountChangedEventResponse> responses = new ArrayList<TransactionAmountChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransactionAmountChangedEventResponse typedResponse = new TransactionAmountChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.transactionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.card = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.newAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TransactionAmountChangedEventResponse getTransactionAmountChangedEventFromLog(
            Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSACTIONAMOUNTCHANGED_EVENT, log);
        TransactionAmountChangedEventResponse typedResponse = new TransactionAmountChangedEventResponse();
        typedResponse.log = log;
        typedResponse.transactionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.card = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.newAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<TransactionAmountChangedEventResponse> transactionAmountChangedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTransactionAmountChangedEventFromLog(log));
    }

    public Flowable<TransactionAmountChangedEventResponse> transactionAmountChangedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSACTIONAMOUNTCHANGED_EVENT));
        return transactionAmountChangedEventFlowable(filter);
    }

    public static List<TransactionAuthorizedNoConfirmationEventResponse> getTransactionAuthorizedNoConfirmationEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSACTIONAUTHORIZEDNOCONFIRMATION_EVENT, transactionReceipt);
        ArrayList<TransactionAuthorizedNoConfirmationEventResponse> responses = new ArrayList<TransactionAuthorizedNoConfirmationEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransactionAuthorizedNoConfirmationEventResponse typedResponse = new TransactionAuthorizedNoConfirmationEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.transactionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.card = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TransactionAuthorizedNoConfirmationEventResponse getTransactionAuthorizedNoConfirmationEventFromLog(
            Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSACTIONAUTHORIZEDNOCONFIRMATION_EVENT, log);
        TransactionAuthorizedNoConfirmationEventResponse typedResponse = new TransactionAuthorizedNoConfirmationEventResponse();
        typedResponse.log = log;
        typedResponse.transactionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.card = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<TransactionAuthorizedNoConfirmationEventResponse> transactionAuthorizedNoConfirmationEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTransactionAuthorizedNoConfirmationEventFromLog(log));
    }

    public Flowable<TransactionAuthorizedNoConfirmationEventResponse> transactionAuthorizedNoConfirmationEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSACTIONAUTHORIZEDNOCONFIRMATION_EVENT));
        return transactionAuthorizedNoConfirmationEventFlowable(filter);
    }

    public static List<TransactionAuthorizedWithOtpEventResponse> getTransactionAuthorizedWithOtpEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSACTIONAUTHORIZEDWITHOTP_EVENT, transactionReceipt);
        ArrayList<TransactionAuthorizedWithOtpEventResponse> responses = new ArrayList<TransactionAuthorizedWithOtpEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransactionAuthorizedWithOtpEventResponse typedResponse = new TransactionAuthorizedWithOtpEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.transactionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.card = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.otp = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.otpCounter = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TransactionAuthorizedWithOtpEventResponse getTransactionAuthorizedWithOtpEventFromLog(
            Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSACTIONAUTHORIZEDWITHOTP_EVENT, log);
        TransactionAuthorizedWithOtpEventResponse typedResponse = new TransactionAuthorizedWithOtpEventResponse();
        typedResponse.log = log;
        typedResponse.transactionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.card = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.otp = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.otpCounter = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<TransactionAuthorizedWithOtpEventResponse> transactionAuthorizedWithOtpEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTransactionAuthorizedWithOtpEventFromLog(log));
    }

    public Flowable<TransactionAuthorizedWithOtpEventResponse> transactionAuthorizedWithOtpEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSACTIONAUTHORIZEDWITHOTP_EVENT));
        return transactionAuthorizedWithOtpEventFlowable(filter);
    }

    public static List<TransactionAuthorizedWithSignatureEventResponse> getTransactionAuthorizedWithSignatureEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSACTIONAUTHORIZEDWITHSIGNATURE_EVENT, transactionReceipt);
        ArrayList<TransactionAuthorizedWithSignatureEventResponse> responses = new ArrayList<TransactionAuthorizedWithSignatureEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransactionAuthorizedWithSignatureEventResponse typedResponse = new TransactionAuthorizedWithSignatureEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.transactionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.card = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.signature = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TransactionAuthorizedWithSignatureEventResponse getTransactionAuthorizedWithSignatureEventFromLog(
            Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSACTIONAUTHORIZEDWITHSIGNATURE_EVENT, log);
        TransactionAuthorizedWithSignatureEventResponse typedResponse = new TransactionAuthorizedWithSignatureEventResponse();
        typedResponse.log = log;
        typedResponse.transactionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.card = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.signature = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<TransactionAuthorizedWithSignatureEventResponse> transactionAuthorizedWithSignatureEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTransactionAuthorizedWithSignatureEventFromLog(log));
    }

    public Flowable<TransactionAuthorizedWithSignatureEventResponse> transactionAuthorizedWithSignatureEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSACTIONAUTHORIZEDWITHSIGNATURE_EVENT));
        return transactionAuthorizedWithSignatureEventFlowable(filter);
    }

    public static List<TransactionSettledEventResponse> getTransactionSettledEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSACTIONSETTLED_EVENT, transactionReceipt);
        ArrayList<TransactionSettledEventResponse> responses = new ArrayList<TransactionSettledEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransactionSettledEventResponse typedResponse = new TransactionSettledEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.transactionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.card = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.settlementAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.paymentAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TransactionSettledEventResponse getTransactionSettledEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSACTIONSETTLED_EVENT, log);
        TransactionSettledEventResponse typedResponse = new TransactionSettledEventResponse();
        typedResponse.log = log;
        typedResponse.transactionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.card = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.settlementAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.paymentAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<TransactionSettledEventResponse> transactionSettledEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTransactionSettledEventFromLog(log));
    }

    public Flowable<TransactionSettledEventResponse> transactionSettledEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSACTIONSETTLED_EVENT));
        return transactionSettledEventFlowable(filter);
    }

    public static List<UnsettledTransactionUnblockedEventResponse> getUnsettledTransactionUnblockedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(UNSETTLEDTRANSACTIONUNBLOCKED_EVENT, transactionReceipt);
        ArrayList<UnsettledTransactionUnblockedEventResponse> responses = new ArrayList<UnsettledTransactionUnblockedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnsettledTransactionUnblockedEventResponse typedResponse = new UnsettledTransactionUnblockedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.transactionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.card = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static UnsettledTransactionUnblockedEventResponse getUnsettledTransactionUnblockedEventFromLog(
            Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(UNSETTLEDTRANSACTIONUNBLOCKED_EVENT, log);
        UnsettledTransactionUnblockedEventResponse typedResponse = new UnsettledTransactionUnblockedEventResponse();
        typedResponse.log = log;
        typedResponse.transactionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.card = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<UnsettledTransactionUnblockedEventResponse> unsettledTransactionUnblockedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getUnsettledTransactionUnblockedEventFromLog(log));
    }

    public Flowable<UnsettledTransactionUnblockedEventResponse> unsettledTransactionUnblockedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UNSETTLEDTRANSACTIONUNBLOCKED_EVENT));
        return unsettledTransactionUnblockedEventFlowable(filter);
    }

    public static List<UpgradedEventResponse> getUpgradedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(UPGRADED_EVENT, transactionReceipt);
        ArrayList<UpgradedEventResponse> responses = new ArrayList<UpgradedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpgradedEventResponse typedResponse = new UpgradedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static UpgradedEventResponse getUpgradedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(UPGRADED_EVENT, log);
        UpgradedEventResponse typedResponse = new UpgradedEventResponse();
        typedResponse.log = log;
        typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getUpgradedEventFromLog(log));
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(DefaultBlockParameter startBlock,
                                                                 DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPGRADED_EVENT));
        return upgradedEventFlowable(filter);
    }

    public static List<VerifiedBalanceIncreasedEventResponse> getVerifiedBalanceIncreasedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(VERIFIEDBALANCEINCREASED_EVENT, transactionReceipt);
        ArrayList<VerifiedBalanceIncreasedEventResponse> responses = new ArrayList<VerifiedBalanceIncreasedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VerifiedBalanceIncreasedEventResponse typedResponse = new VerifiedBalanceIncreasedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.increase = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.verifiedBalance = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static VerifiedBalanceIncreasedEventResponse getVerifiedBalanceIncreasedEventFromLog(
            Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(VERIFIEDBALANCEINCREASED_EVENT, log);
        VerifiedBalanceIncreasedEventResponse typedResponse = new VerifiedBalanceIncreasedEventResponse();
        typedResponse.log = log;
        typedResponse.increase = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.verifiedBalance = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<VerifiedBalanceIncreasedEventResponse> verifiedBalanceIncreasedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getVerifiedBalanceIncreasedEventFromLog(log));
    }

    public Flowable<VerifiedBalanceIncreasedEventResponse> verifiedBalanceIncreasedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VERIFIEDBALANCEINCREASED_EVENT));
        return verifiedBalanceIncreasedEventFlowable(filter);
    }

    public static List<VerifiedBalanceSetEventResponse> getVerifiedBalanceSetEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(VERIFIEDBALANCESET_EVENT, transactionReceipt);
        ArrayList<VerifiedBalanceSetEventResponse> responses = new ArrayList<VerifiedBalanceSetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VerifiedBalanceSetEventResponse typedResponse = new VerifiedBalanceSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.verifiedBalance = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static VerifiedBalanceSetEventResponse getVerifiedBalanceSetEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(VERIFIEDBALANCESET_EVENT, log);
        VerifiedBalanceSetEventResponse typedResponse = new VerifiedBalanceSetEventResponse();
        typedResponse.log = log;
        typedResponse.verifiedBalance = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<VerifiedBalanceSetEventResponse> verifiedBalanceSetEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getVerifiedBalanceSetEventFromLog(log));
    }

    public Flowable<VerifiedBalanceSetEventResponse> verifiedBalanceSetEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VERIFIEDBALANCESET_EVENT));
        return verifiedBalanceSetEventFlowable(filter);
    }

    public static List<WithdrawalCanceledEventResponse> getWithdrawalCanceledEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(WITHDRAWALCANCELED_EVENT, transactionReceipt);
        ArrayList<WithdrawalCanceledEventResponse> responses = new ArrayList<WithdrawalCanceledEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WithdrawalCanceledEventResponse typedResponse = new WithdrawalCanceledEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.to = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static WithdrawalCanceledEventResponse getWithdrawalCanceledEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(WITHDRAWALCANCELED_EVENT, log);
        WithdrawalCanceledEventResponse typedResponse = new WithdrawalCanceledEventResponse();
        typedResponse.log = log;
        typedResponse.to = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<WithdrawalCanceledEventResponse> withdrawalCanceledEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getWithdrawalCanceledEventFromLog(log));
    }

    public Flowable<WithdrawalCanceledEventResponse> withdrawalCanceledEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAWALCANCELED_EVENT));
        return withdrawalCanceledEventFlowable(filter);
    }

    public static List<WithdrawalCompleteEventResponse> getWithdrawalCompleteEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(WITHDRAWALCOMPLETE_EVENT, transactionReceipt);
        ArrayList<WithdrawalCompleteEventResponse> responses = new ArrayList<WithdrawalCompleteEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WithdrawalCompleteEventResponse typedResponse = new WithdrawalCompleteEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.to = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static WithdrawalCompleteEventResponse getWithdrawalCompleteEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(WITHDRAWALCOMPLETE_EVENT, log);
        WithdrawalCompleteEventResponse typedResponse = new WithdrawalCompleteEventResponse();
        typedResponse.log = log;
        typedResponse.to = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<WithdrawalCompleteEventResponse> withdrawalCompleteEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getWithdrawalCompleteEventFromLog(log));
    }

    public Flowable<WithdrawalCompleteEventResponse> withdrawalCompleteEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAWALCOMPLETE_EVENT));
        return withdrawalCompleteEventFlowable(filter);
    }

    public static List<WithdrawalInitiatedEventResponse> getWithdrawalInitiatedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(WITHDRAWALINITIATED_EVENT, transactionReceipt);
        ArrayList<WithdrawalInitiatedEventResponse> responses = new ArrayList<WithdrawalInitiatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WithdrawalInitiatedEventResponse typedResponse = new WithdrawalInitiatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.to = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.readyToWithdrawTimestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static WithdrawalInitiatedEventResponse getWithdrawalInitiatedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(WITHDRAWALINITIATED_EVENT, log);
        WithdrawalInitiatedEventResponse typedResponse = new WithdrawalInitiatedEventResponse();
        typedResponse.log = log;
        typedResponse.to = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.readyToWithdrawTimestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<WithdrawalInitiatedEventResponse> withdrawalInitiatedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getWithdrawalInitiatedEventFromLog(log));
    }

    public Flowable<WithdrawalInitiatedEventResponse> withdrawalInitiatedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAWALINITIATED_EVENT));
        return withdrawalInitiatedEventFlowable(filter);
    }

    public RemoteFunctionCall<String> UPGRADE_INTERFACE_VERSION() {
        final Function function = new Function(FUNC_UPGRADE_INTERFACE_VERSION,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<List> activeCardAddresses() {
        final Function function = new Function(FUNC_ACTIVECARDADDRESSES,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> addCard(String cardAddress, CardParams cardParams,
                                                          byte[] ownershipAcceptanceSignature, byte[] cardConfirmationSignature) {
        final Function function = new Function(
                FUNC_ADDCARD,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, cardAddress),
                        cardParams,
                        new org.web3j.abi.datatypes.DynamicBytes(ownershipAcceptanceSignature),
                        new org.web3j.abi.datatypes.DynamicBytes(cardConfirmationSignature)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> authLimitMargin() {
        final Function function = new Function(FUNC_AUTHLIMITMARGIN,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple4<BigInteger, String, BigInteger, Boolean>> authorizedTransactions(
            BigInteger param0) {
        final Function function = new Function(FUNC_AUTHORIZEDTRANSACTIONS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint64>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple4<BigInteger, String, BigInteger, Boolean>>(function,
                new Callable<Tuple4<BigInteger, String, BigInteger, Boolean>>() {
                    @Override
                    public Tuple4<BigInteger, String, BigInteger, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<BigInteger, String, BigInteger, Boolean>(
                                (BigInteger) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (Boolean) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> availableForDebtPayment() {
        final Function function = new Function(FUNC_AVAILABLEFORDEBTPAYMENT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> availableForPayment() {
        final Function function = new Function(FUNC_AVAILABLEFORPAYMENT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> availableForWithdrawal() {
        final Function function = new Function(FUNC_AVAILABLEFORWITHDRAWAL,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> blockedAmount() {
        final Function function = new Function(FUNC_BLOCKEDAMOUNT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> cancelWithdrawal() {
        final Function function = new Function(
                FUNC_CANCELWITHDRAWAL,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> cardConfirmationNonce() {
        final Function function = new Function(FUNC_CARDCONFIRMATIONNONCE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple5<Boolean, Boolean, BigInteger, OtpStateSetting, LimitsSetting>> cards(
            String param0) {
        final Function function = new Function(FUNC_CARDS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint64>() {}, new TypeReference<OtpStateSetting>() {}, new TypeReference<LimitsSetting>() {}));
        return new RemoteFunctionCall<Tuple5<Boolean, Boolean, BigInteger, OtpStateSetting, LimitsSetting>>(function,
                new Callable<Tuple5<Boolean, Boolean, BigInteger, OtpStateSetting, LimitsSetting>>() {
                    @Override
                    public Tuple5<Boolean, Boolean, BigInteger, OtpStateSetting, LimitsSetting> call(
                    ) throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<Boolean, Boolean, BigInteger, OtpStateSetting, LimitsSetting>(
                                (Boolean) results.get(0).getValue(),
                                (Boolean) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (OtpStateSetting) results.get(3),
                                (LimitsSetting) results.get(4));
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> debtAmount() {
        final Function function = new Function(FUNC_DEBTAMOUNT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> disableCard(String card) {
        final Function function = new Function(
                FUNC_DISABLECARD,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, card)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>> eip712Domain(
    ) {
        final Function function = new Function(FUNC_EIP712DOMAIN,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes1>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>>(function,
                new Callable<Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>>() {
                    @Override
                    public Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>> call(
                    ) throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>(
                                (byte[]) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue(),
                                (String) results.get(4).getValue(),
                                (byte[]) results.get(5).getValue(),
                                convertToNative((List<Uint256>) results.get(6).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> enableCard(String card, Boolean isOwner,
                                                             byte[] ownershipAcceptanceSignature, byte[] cardConfirmationSignature) {
        final Function function = new Function(
                FUNC_ENABLECARD,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, card),
                        new org.web3j.abi.datatypes.Bool(isOwner),
                        new org.web3j.abi.datatypes.DynamicBytes(ownershipAcceptanceSignature),
                        new org.web3j.abi.datatypes.DynamicBytes(cardConfirmationSignature)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> factory() {
        final Function function = new Function(FUNC_FACTORY,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> increaseVerifiedBalance(BigInteger increase) {
        final Function function = new Function(
                FUNC_INCREASEVERIFIEDBALANCE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(increase)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> initWithdrawal(String to, BigInteger amount) {
        final Function function = new Function(
                FUNC_INITWITHDRAWAL,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to),
                        new org.web3j.abi.datatypes.generated.Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize(String owner_, String processor_,
                                                             String registry_, String cardAddress, CardParams cardParams,
                                                             BigInteger authLimitMargin_) {
        final Function function = new Function(
                FUNC_INITIALIZE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner_),
                        new org.web3j.abi.datatypes.Address(160, processor_),
                        new org.web3j.abi.datatypes.Address(160, registry_),
                        new org.web3j.abi.datatypes.Address(160, cardAddress),
                        cardParams,
                        new org.web3j.abi.datatypes.generated.Uint256(authLimitMargin_)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> isTrustedForwarder(String forwarder) {
        final Function function = new Function(FUNC_ISTRUSTEDFORWARDER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, forwarder)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isWithdrawalInProgress() {
        final Function function = new Function(FUNC_ISWITHDRAWALINPROGRESS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isWithdrawalReady() {
        final Function function = new Function(FUNC_ISWITHDRAWALREADY,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> ownershipAcceptanceNonce() {
        final Function function = new Function(FUNC_OWNERSHIPACCEPTANCENONCE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> payDebt(BigInteger amount) {
        final Function function = new Function(
                FUNC_PAYDEBT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> paymentToken() {
        final Function function = new Function(FUNC_PAYMENTTOKEN,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> processAuthorizationChange(String card,
                                                                             BigInteger transactionId, BigInteger newAmount) {
        final Function function = new Function(
                FUNC_PROCESSAUTHORIZATIONCHANGE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, card),
                        new org.web3j.abi.datatypes.generated.Uint256(transactionId),
                        new org.web3j.abi.datatypes.generated.Uint256(newAmount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> processDebt(String card, BigInteger amount) {
        final Function function = new Function(
                FUNC_PROCESSDEBT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, card),
                        new org.web3j.abi.datatypes.generated.Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> processNoConfirmationAuthorization(String card,
                                                                                     BigInteger transactionId, BigInteger amount, Boolean forced) {
        final Function function = new Function(
                FUNC_PROCESSNOCONFIRMATIONAUTHORIZATION,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, card),
                        new org.web3j.abi.datatypes.generated.Uint256(transactionId),
                        new org.web3j.abi.datatypes.generated.Uint256(amount),
                        new org.web3j.abi.datatypes.Bool(forced)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> processOtpAuthorization(String card,
                                                                          BigInteger transactionId, BigInteger amount, byte[] otp, BigInteger otpCounter,
                                                                          Boolean forced) {
        final Function function = new Function(
                FUNC_PROCESSOTPAUTHORIZATION,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, card),
                        new org.web3j.abi.datatypes.generated.Uint256(transactionId),
                        new org.web3j.abi.datatypes.generated.Uint256(amount),
                        new org.web3j.abi.datatypes.generated.Bytes16(otp),
                        new org.web3j.abi.datatypes.generated.Uint16(otpCounter),
                        new org.web3j.abi.datatypes.Bool(forced)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> processRefundPayment(String card,
                                                                       BigInteger transactionId) {
        final Function function = new Function(
                FUNC_PROCESSREFUNDPAYMENT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, card),
                        new org.web3j.abi.datatypes.generated.Uint256(transactionId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> processSettlement(String card,
                                                                    BigInteger transactionId, BigInteger amount) {
        final Function function = new Function(
                FUNC_PROCESSSETTLEMENT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, card),
                        new org.web3j.abi.datatypes.generated.Uint256(transactionId),
                        new org.web3j.abi.datatypes.generated.Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> processSignatureAuthorization(String card,
                                                                                BigInteger transactionId, BigInteger amount, byte[] transactionConfirmationSignature,
                                                                                Boolean forced) {
        final Function function = new Function(
                FUNC_PROCESSSIGNATUREAUTHORIZATION,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, card),
                        new org.web3j.abi.datatypes.generated.Uint256(transactionId),
                        new org.web3j.abi.datatypes.generated.Uint256(amount),
                        new org.web3j.abi.datatypes.DynamicBytes(transactionConfirmationSignature),
                        new org.web3j.abi.datatypes.Bool(forced)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> processUnsettledTransaction(String card,
                                                                              BigInteger transactionId) {
        final Function function = new Function(
                FUNC_PROCESSUNSETTLEDTRANSACTION,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, card),
                        new org.web3j.abi.datatypes.generated.Uint256(transactionId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> processWithdrawal() {
        final Function function = new Function(
                FUNC_PROCESSWITHDRAWAL,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> processor() {
        final Function function = new Function(FUNC_PROCESSOR,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<byte[]> proxiableUUID() {
        final Function function = new Function(FUNC_PROXIABLEUUID,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<String> registry() {
        final Function function = new Function(FUNC_REGISTRY,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> removeOwner() {
        final Function function = new Function(
                FUNC_REMOVEOWNER,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> securityDelay() {
        final Function function = new Function(FUNC_SECURITYDELAY,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> setAuthLimitMargin(BigInteger authLimitMargin_) {
        final Function function = new Function(
                FUNC_SETAUTHLIMITMARGIN,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(authLimitMargin_)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setCardIsOwner(String card, Boolean isOwner) {
        final Function function = new Function(
                FUNC_SETCARDISOWNER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, card),
                        new org.web3j.abi.datatypes.Bool(isOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setLimits(String card,
                                                            LimitsParams limitsParams) {
        final Function function = new Function(
                FUNC_SETLIMITS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, card),
                        limitsParams),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setOtpState(String card, OtpState otpState) {
        final Function function = new Function(
                FUNC_SETOTPSTATE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, card),
                        otpState),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setOwner(String owner_,
                                                           byte[] ownershipAcceptanceSignature) {
        final Function function = new Function(
                FUNC_SETOWNER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner_),
                        new org.web3j.abi.datatypes.DynamicBytes(ownershipAcceptanceSignature)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setVerifiedBalance(BigInteger verifiedBalance_) {
        final Function function = new Function(
                FUNC_SETVERIFIEDBALANCE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(verifiedBalance_)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> transactionConfirmationNonce() {
        final Function function = new Function(FUNC_TRANSACTIONCONFIRMATIONNONCE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> trustedForwarder() {
        final Function function = new Function(FUNC_TRUSTEDFORWARDER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> upgradeToAndCall(String newImplementation,
                                                                   byte[] data, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_UPGRADETOANDCALL,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newImplementation),
                        new org.web3j.abi.datatypes.DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<BigInteger> verifiedBalance() {
        final Function function = new Function(FUNC_VERIFIEDBALANCE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> withdrawalAddress() {
        final Function function = new Function(FUNC_WITHDRAWALADDRESS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> withdrawalAmount() {
        final Function function = new Function(FUNC_WITHDRAWALAMOUNT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> withdrawalReadyTimestamp() {
        final Function function = new Function(FUNC_WITHDRAWALREADYTIMESTAMP,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> writeOffDebt(BigInteger amount) {
        final Function function = new Function(
                FUNC_WRITEOFFDEBT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static TangemPaymentAccount load(String contractAddress, Web3j web3j,
                                            Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new TangemPaymentAccount(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static TangemPaymentAccount load(String contractAddress, Web3j web3j,
                                            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new TangemPaymentAccount(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static TangemPaymentAccount load(String contractAddress, Web3j web3j,
                                            Credentials credentials, ContractGasProvider contractGasProvider) {
        return new TangemPaymentAccount(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static TangemPaymentAccount load(String contractAddress, Web3j web3j,
                                            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new TangemPaymentAccount(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<TangemPaymentAccount> deploy(Web3j web3j, Credentials credentials,
                                                          ContractGasProvider contractGasProvider, String trustedForwarder) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, trustedForwarder)));
        return deployRemoteCall(TangemPaymentAccount.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    public static RemoteCall<TangemPaymentAccount> deploy(Web3j web3j,
                                                          TransactionManager transactionManager, ContractGasProvider contractGasProvider,
                                                          String trustedForwarder) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, trustedForwarder)));
        return deployRemoteCall(TangemPaymentAccount.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<TangemPaymentAccount> deploy(Web3j web3j, Credentials credentials,
                                                          BigInteger gasPrice, BigInteger gasLimit, String trustedForwarder) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, trustedForwarder)));
        return deployRemoteCall(TangemPaymentAccount.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<TangemPaymentAccount> deploy(Web3j web3j,
                                                          TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit,
                                                          String trustedForwarder) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, trustedForwarder)));
        return deployRemoteCall(TangemPaymentAccount.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    public static void linkLibraries(List<Contract.LinkReference> references) {
        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class OtpState extends StaticStruct {
        public byte[] otp;

        public BigInteger counter;

        public OtpState(byte[] otp, BigInteger counter) {
            super(new org.web3j.abi.datatypes.generated.Bytes16(otp),
                    new org.web3j.abi.datatypes.generated.Uint16(counter));
            this.otp = otp;
            this.counter = counter;
        }

        public OtpState(Bytes16 otp, Uint16 counter) {
            super(otp, counter);
            this.otp = otp.getValue();
            this.counter = counter.getValue();
        }
    }

    public static class LimitsParams extends StaticStruct {
        public BigInteger singleTransactionLimit;

        public BigInteger spendLimit;

        public BigInteger noConfirmationSpendLimit;

        public BigInteger spendLimitsPeriod;

        public LimitsParams(BigInteger singleTransactionLimit, BigInteger spendLimit,
                            BigInteger noConfirmationSpendLimit, BigInteger spendLimitsPeriod) {
            super(new org.web3j.abi.datatypes.generated.Uint256(singleTransactionLimit),
                    new org.web3j.abi.datatypes.generated.Uint256(spendLimit),
                    new org.web3j.abi.datatypes.generated.Uint256(noConfirmationSpendLimit),
                    new org.web3j.abi.datatypes.generated.Uint256(spendLimitsPeriod));
            this.singleTransactionLimit = singleTransactionLimit;
            this.spendLimit = spendLimit;
            this.noConfirmationSpendLimit = noConfirmationSpendLimit;
            this.spendLimitsPeriod = spendLimitsPeriod;
        }

        public LimitsParams(Uint256 singleTransactionLimit, Uint256 spendLimit,
                            Uint256 noConfirmationSpendLimit, Uint256 spendLimitsPeriod) {
            super(singleTransactionLimit, spendLimit, noConfirmationSpendLimit, spendLimitsPeriod);
            this.singleTransactionLimit = singleTransactionLimit.getValue();
            this.spendLimit = spendLimit.getValue();
            this.noConfirmationSpendLimit = noConfirmationSpendLimit.getValue();
            this.spendLimitsPeriod = spendLimitsPeriod.getValue();
        }
    }

    public static class Limit extends StaticStruct {
        public BigInteger limit;

        public BigInteger spent;

        public Limit(BigInteger limit, BigInteger spent) {
            super(new org.web3j.abi.datatypes.generated.Uint256(limit),
                    new org.web3j.abi.datatypes.generated.Uint256(spent));
            this.limit = limit;
            this.spent = spent;
        }

        public Limit(Uint256 limit, Uint256 spent) {
            super(limit, spent);
            this.limit = limit.getValue();
            this.spent = spent.getValue();
        }
    }

    public static class Timer extends StaticStruct {
        public BigInteger expireTimestamp;

        public Timer(BigInteger expireTimestamp) {
            super(new org.web3j.abi.datatypes.generated.Uint256(expireTimestamp));
            this.expireTimestamp = expireTimestamp;
        }

        public Timer(Uint256 expireTimestamp) {
            super(expireTimestamp);
            this.expireTimestamp = expireTimestamp.getValue();
        }
    }

    public static class CardParams extends StaticStruct {
        public Boolean isOwner;

        public OtpState otpState;

        public LimitsParams limitsParams;

        public CardParams(Boolean isOwner, OtpState otpState, LimitsParams limitsParams) {
            super(new org.web3j.abi.datatypes.Bool(isOwner),
                    otpState,
                    limitsParams);
            this.isOwner = isOwner;
            this.otpState = otpState;
            this.limitsParams = limitsParams;
        }

        public CardParams(Bool isOwner, OtpState otpState, LimitsParams limitsParams) {
            super(isOwner, otpState, limitsParams);
            this.isOwner = isOwner.getValue();
            this.otpState = otpState;
            this.limitsParams = limitsParams;
        }
    }

    public static class OtpStateSetting extends StaticStruct {
        public OtpState oldValue;

        public OtpState newValue;

        public BigInteger changeTimestamp;

        public OtpStateSetting(OtpState oldValue, OtpState newValue, BigInteger changeTimestamp) {
            super(oldValue,
                    newValue,
                    new org.web3j.abi.datatypes.generated.Uint256(changeTimestamp));
            this.oldValue = oldValue;
            this.newValue = newValue;
            this.changeTimestamp = changeTimestamp;
        }

        public OtpStateSetting(OtpState oldValue, OtpState newValue, Uint256 changeTimestamp) {
            super(oldValue, newValue, changeTimestamp);
            this.oldValue = oldValue;
            this.newValue = newValue;
            this.changeTimestamp = changeTimestamp.getValue();
        }
    }

    public static class Limits extends StaticStruct {
        public BigInteger singleTransactionLimit;

        public Limit spendLimit;

        public Limit noConfirmationSpendLimit;

        public Timer spendLimitsTimer;

        public BigInteger spendLimitsPeriod;

        public Limits(BigInteger singleTransactionLimit, Limit spendLimit,
                      Limit noConfirmationSpendLimit, Timer spendLimitsTimer,
                      BigInteger spendLimitsPeriod) {
            super(new org.web3j.abi.datatypes.generated.Uint256(singleTransactionLimit),
                    spendLimit,
                    noConfirmationSpendLimit,
                    spendLimitsTimer,
                    new org.web3j.abi.datatypes.generated.Uint256(spendLimitsPeriod));
            this.singleTransactionLimit = singleTransactionLimit;
            this.spendLimit = spendLimit;
            this.noConfirmationSpendLimit = noConfirmationSpendLimit;
            this.spendLimitsTimer = spendLimitsTimer;
            this.spendLimitsPeriod = spendLimitsPeriod;
        }

        public Limits(Uint256 singleTransactionLimit, Limit spendLimit,
                      Limit noConfirmationSpendLimit, Timer spendLimitsTimer, Uint256 spendLimitsPeriod) {
            super(singleTransactionLimit, spendLimit, noConfirmationSpendLimit, spendLimitsTimer, spendLimitsPeriod);
            this.singleTransactionLimit = singleTransactionLimit.getValue();
            this.spendLimit = spendLimit;
            this.noConfirmationSpendLimit = noConfirmationSpendLimit;
            this.spendLimitsTimer = spendLimitsTimer;
            this.spendLimitsPeriod = spendLimitsPeriod.getValue();
        }
    }

    public static class LimitsSetting extends StaticStruct {
        public Limits oldValue;

        public Limits newValue;

        public BigInteger changeTimestamp;

        public LimitsSetting(Limits oldValue, Limits newValue, BigInteger changeTimestamp) {
            super(oldValue,
                    newValue,
                    new org.web3j.abi.datatypes.generated.Uint256(changeTimestamp));
            this.oldValue = oldValue;
            this.newValue = newValue;
            this.changeTimestamp = changeTimestamp;
        }

        public LimitsSetting(Limits oldValue, Limits newValue, Uint256 changeTimestamp) {
            super(oldValue, newValue, changeTimestamp);
            this.oldValue = oldValue;
            this.newValue = newValue;
            this.changeTimestamp = changeTimestamp.getValue();
        }
    }

    public static class AccountStateAfterSettlementEventResponse extends BaseEventResponse {
        public BigInteger balance;

        public BigInteger blockedAmount;

        public BigInteger debtTotal;
    }

    public static class AuthLimitMarginSetEventResponse extends BaseEventResponse {
        public BigInteger authLimitMargin;
    }

    public static class CardAddedEventResponse extends BaseEventResponse {
        public String cardAddress;

        public CardParams cardData;
    }

    public static class CardDisabledEventResponse extends BaseEventResponse {
        public String card;
    }

    public static class CardEnabledEventResponse extends BaseEventResponse {
        public String card;

        public Boolean isOwner;
    }

    public static class DebtIncreasedEventResponse extends BaseEventResponse {
        public BigInteger increase;

        public BigInteger debtAmount;
    }

    public static class DebtPaidEventResponse extends BaseEventResponse {
        public BigInteger paid;

        public BigInteger debtLeft;
    }

    public static class DebtWrittenOffEventResponse extends BaseEventResponse {
        public BigInteger writtenOff;

        public BigInteger debtLeft;
    }

    public static class EIP712DomainChangedEventResponse extends BaseEventResponse {
    }

    public static class InitializedEventResponse extends BaseEventResponse {
        public BigInteger version;
    }

    public static class InsufficientFundsOnForcedAuthEventResponse extends BaseEventResponse {
        public BigInteger transactionId;

        public String card;

        public BigInteger insufficientAmount;
    }

    public static class LimitsSetEventResponse extends BaseEventResponse {
        public String card;

        public LimitsParams limitsParams;
    }

    public static class OtpStateSetEventResponse extends BaseEventResponse {
        public String card;

        public OtpState otpState;
    }

    public static class OwnerRemovedEventResponse extends BaseEventResponse {
        public String previousOwner;
    }

    public static class OwnerSetEventResponse extends BaseEventResponse {
        public String owner;
    }

    public static class ProcessorSetEventResponse extends BaseEventResponse {
        public String processor;

        public String paymentToken;
    }

    public static class RefundPaidEventResponse extends BaseEventResponse {
        public BigInteger transactionId;

        public String card;

        public BigInteger amount;
    }

    public static class TransactionAmountChangedEventResponse extends BaseEventResponse {
        public BigInteger transactionId;

        public String card;

        public BigInteger newAmount;
    }

    public static class TransactionAuthorizedNoConfirmationEventResponse extends BaseEventResponse {
        public BigInteger transactionId;

        public String card;

        public BigInteger amount;
    }

    public static class TransactionAuthorizedWithOtpEventResponse extends BaseEventResponse {
        public BigInteger transactionId;

        public String card;

        public BigInteger amount;

        public byte[] otp;

        public BigInteger otpCounter;
    }

    public static class TransactionAuthorizedWithSignatureEventResponse extends BaseEventResponse {
        public BigInteger transactionId;

        public String card;

        public BigInteger amount;

        public byte[] signature;
    }

    public static class TransactionSettledEventResponse extends BaseEventResponse {
        public BigInteger transactionId;

        public String card;

        public BigInteger settlementAmount;

        public BigInteger paymentAmount;
    }

    public static class UnsettledTransactionUnblockedEventResponse extends BaseEventResponse {
        public BigInteger transactionId;

        public String card;

        public BigInteger amount;
    }

    public static class UpgradedEventResponse extends BaseEventResponse {
        public String implementation;
    }

    public static class VerifiedBalanceIncreasedEventResponse extends BaseEventResponse {
        public BigInteger increase;

        public BigInteger verifiedBalance;
    }

    public static class VerifiedBalanceSetEventResponse extends BaseEventResponse {
        public BigInteger verifiedBalance;
    }

    public static class WithdrawalCanceledEventResponse extends BaseEventResponse {
        public String to;

        public BigInteger amount;
    }

    public static class WithdrawalCompleteEventResponse extends BaseEventResponse {
        public String to;

        public BigInteger amount;
    }

    public static class WithdrawalInitiatedEventResponse extends BaseEventResponse {
        public String to;

        public BigInteger amount;

        public BigInteger readyToWithdrawTimestamp;
    }
}