package com.tangem.lib.visa;

import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.*;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

import io.reactivex.Flowable;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.5.2.
 */
@SuppressWarnings("rawtypes")
class TangemPaymentAccount extends Contract {
    public static final String BINARY = "";

    public static final String FUNC_UPGRADE_INTERFACE_VERSION = "UPGRADE_INTERFACE_VERSION";

    public static final String FUNC_AUTHORIZEDTRANSACTIONS = "authorizedTransactions";

    public static final String FUNC_AVAILABLEFORDEBTPAYMENT = "availableForDebtPayment";

    public static final String FUNC_AVAILABLEFORPAYMENT = "availableForPayment";

    public static final String FUNC_AVAILABLEFORWITHDRAWAL = "availableForWithdrawal";

    public static final String FUNC_BLOCKEDAMOUNT = "blockedAmount";

    public static final String FUNC_CANCELWITHDRAWAL = "cancelWithdrawal";

    public static final String FUNC_CARDWITHOTP = "cardWithOtp";

    public static final String FUNC_DEBTAMOUNT = "debtAmount";

    public static final String FUNC_EIP712DOMAIN = "eip712Domain";

    public static final String FUNC_FACTORY = "factory";

    public static final String FUNC_INCREASEVERIFIEDBALANCE = "increaseVerifiedBalance";

    public static final String FUNC_INITWITHDRAWAL = "initWithdrawal";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_ISTRUSTEDFORWARDER = "isTrustedForwarder";

    public static final String FUNC_ISWITHDRAWALINPROGRESS = "isWithdrawalInProgress";

    public static final String FUNC_ISWITHDRAWALREADY = "isWithdrawalReady";

    public static final String FUNC_LIMITS = "limits";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_OWNERSHIPACCEPTANCENONCE = "ownershipAcceptanceNonce";

    public static final String FUNC_PAYMENTTOKEN = "paymentToken";

    public static final String FUNC_PENDINGREFUNDAMOUNT = "pendingRefundAmount";

    public static final String FUNC_PENDINGREFUNDTOTAL = "pendingRefundTotal";

    public static final String FUNC_PROCESSAUTHORIZATION = "processAuthorization";

    public static final String FUNC_PROCESSAUTHORIZATIONCHANGE = "processAuthorizationChange";

    public static final String FUNC_PROCESSAUTHORIZATIONNOOTP = "processAuthorizationNoOtp";

    public static final String FUNC_PROCESSDEBT = "processDebt";

    public static final String FUNC_PROCESSPENDINGREFUNDPAYMENT = "processPendingRefundPayment";

    public static final String FUNC_PROCESSREFUNDPAYMENT = "processRefundPayment";

    public static final String FUNC_PROCESSSETTLEMENT = "processSettlement";

    public static final String FUNC_PROCESSWITHDRAWAL = "processWithdrawal";

    public static final String FUNC_PROCESSOR = "processor";

    public static final String FUNC_PROXIABLEUUID = "proxiableUUID";

    public static final String FUNC_REGISTRY = "registry";

    public static final String FUNC_SAVEPENDINGREFUND = "savePendingRefund";

    public static final String FUNC_SECURITYDELAY = "securityDelay";

    public static final String FUNC_SETCARD = "setCard";

    public static final String FUNC_SETLIMITS = "setLimits";

    public static final String FUNC_SETOTPSTATE = "setOtpState";

    public static final String FUNC_SETOWNER = "setOwner";

    public static final String FUNC_SETPROCESSOR = "setProcessor";

    public static final String FUNC_SETVERIFIEDBALANCE = "setVerifiedBalance";

    public static final String FUNC_SETTLEMENTPERIOD = "settlementPeriod";

    public static final String FUNC_TRUSTEDFORWARDER = "trustedForwarder";

    public static final String FUNC_UNBLOCKUNSETTLEDTRANSACTION = "unblockUnsettledTransaction";

    public static final String FUNC_UPGRADETOANDCALL = "upgradeToAndCall";

    public static final String FUNC_VERIFIEDBALANCE = "verifiedBalance";

    public static final String FUNC_WITHDRAWALAMOUNT = "withdrawalAmount";

    public static final String FUNC_WITHDRAWALREADYTIMESTAMP = "withdrawalReadyTimestamp";

    public static final String FUNC_WRITEOFFDEBT = "writeOffDebt";

    public static final Event ACCOUNTSTATEAFTERSETTLEMENT_EVENT = new Event("AccountStateAfterSettlement",
            Arrays.asList(new TypeReference<Uint256>() {
            }, new TypeReference<Uint256>() {
            }, new TypeReference<Uint256>() {
            }, new TypeReference<Uint256>() {
            }));

    public static final Event CARDSET_EVENT = new Event("CardSet",
            Arrays.asList(new TypeReference<Address>() {
            }, new TypeReference<Bytes16>() {
            }, new TypeReference<Uint16>() {
            }));

    public static final Event DEBTINCREASED_EVENT = new Event("DebtIncreased",
            Arrays.asList(new TypeReference<Uint256>() {
            }, new TypeReference<Uint256>() {
            }));

    public static final Event DEBTPAID_EVENT = new Event("DebtPaid",
            Arrays.asList(new TypeReference<Uint256>() {
            }, new TypeReference<Uint256>() {
            }));

    public static final Event DEBTWRITTENOFF_EVENT = new Event("DebtWrittenOff",
            Arrays.asList(new TypeReference<Uint256>() {
            }, new TypeReference<Uint256>() {
            }));

    public static final Event EIP712DOMAINCHANGED_EVENT = new Event("EIP712DomainChanged",
            List.of());

    public static final Event INITIALIZED_EVENT = new Event("Initialized",
            List.of(new TypeReference<Uint64>() {
            }));

    public static final Event INSUFFICIENTFUNDSONFORCEDAUTH_EVENT = new Event("InsufficientFundsOnForcedAuth",
            Arrays.asList(new TypeReference<Uint256>(true) {
            }, new TypeReference<Uint256>() {
            }));

    public static final Event LIMITSSET_EVENT = new Event("LimitsSet",
            Arrays.asList(new TypeReference<Uint256>() {
            }, new TypeReference<Uint256>() {
            }, new TypeReference<Uint256>() {
            }, new TypeReference<Uint256>() {
            }));

    public static final Event NOOTPTRANSACTIONAUTHORIZED_EVENT = new Event("NoOtpTransactionAuthorized",
            Arrays.asList(new TypeReference<Uint256>(true) {
            }, new TypeReference<Uint256>() {
            }));

    public static final Event OTPSTATESET_EVENT = new Event("OtpStateSet",
            Arrays.asList(new TypeReference<Bytes16>() {
            }, new TypeReference<Uint16>() {
            }));

    public static final Event OWNERSET_EVENT = new Event("OwnerSet",
            List.of(new TypeReference<Address>() {
            }));

    public static final Event PENDINGREFUNDSAVED_EVENT = new Event("PendingRefundSaved",
            Arrays.asList(new TypeReference<Uint256>(true) {
            }, new TypeReference<Uint256>() {
            }));

    public static final Event PROCESSORSET_EVENT = new Event("ProcessorSet",
            Arrays.asList(new TypeReference<Address>() {
            }, new TypeReference<Address>() {
            }));

    public static final Event REFUNDPAID_EVENT = new Event("RefundPaid",
            Arrays.asList(new TypeReference<Uint256>(true) {
            }, new TypeReference<Uint256>() {
            }));

    public static final Event TRANSACTIONAMOUNTCHANGED_EVENT = new Event("TransactionAmountChanged",
            Arrays.asList(new TypeReference<Uint256>(true) {
            }, new TypeReference<Uint256>() {
            }));

    public static final Event TRANSACTIONAUTHORIZED_EVENT = new Event("TransactionAuthorized",
            Arrays.asList(new TypeReference<Uint256>(true) {
            }, new TypeReference<Uint256>() {
            }, new TypeReference<Bytes16>() {
            }, new TypeReference<Uint16>() {
            }));

    public static final Event TRANSACTIONSETTLED_EVENT = new Event("TransactionSettled",
            Arrays.asList(new TypeReference<Uint256>(true) {
            }, new TypeReference<Uint256>() {
            }, new TypeReference<Uint256>() {
            }));

    public static final Event UNSETTLEDTRANSACTIONUNBLOCKED_EVENT = new Event("UnsettledTransactionUnblocked",
            Arrays.asList(new TypeReference<Uint256>(true) {
            }, new TypeReference<Uint256>() {
            }));

    public static final Event UPGRADED_EVENT = new Event("Upgraded",
            List.of(new TypeReference<Address>(true) {
            }));

    public static final Event VERIFIEDBALANCEINCREASED_EVENT = new Event("VerifiedBalanceIncreased",
            Arrays.asList(new TypeReference<Uint256>() {
            }, new TypeReference<Uint256>() {
            }));

    public static final Event VERIFIEDBALANCESET_EVENT = new Event("VerifiedBalanceSet",
            List.of(new TypeReference<Uint256>() {
            }));

    public static final Event WITHDRAWALCANCELED_EVENT = new Event("WithdrawalCanceled",
            List.of());

    public static final Event WITHDRAWALCOMPLETE_EVENT = new Event("WithdrawalComplete",
            Arrays.asList(new TypeReference<Address>(true) {
            }, new TypeReference<Uint256>() {
            }));

    public static final Event WITHDRAWALINITIATED_EVENT = new Event("WithdrawalInitiated",
            Arrays.asList(new TypeReference<Uint256>() {
            }, new TypeReference<Uint256>() {
            }));

    @Deprecated
    protected TangemPaymentAccount(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected TangemPaymentAccount(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected TangemPaymentAccount(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected TangemPaymentAccount(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<AccountStateAfterSettlementEventResponse> getAccountStateAfterSettlementEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ACCOUNTSTATEAFTERSETTLEMENT_EVENT, transactionReceipt);
        ArrayList<AccountStateAfterSettlementEventResponse> responses = new ArrayList<AccountStateAfterSettlementEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            AccountStateAfterSettlementEventResponse typedResponse = new AccountStateAfterSettlementEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.balance = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.blockedAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.debtTotal = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.pendingRefundTotal = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static AccountStateAfterSettlementEventResponse getAccountStateAfterSettlementEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ACCOUNTSTATEAFTERSETTLEMENT_EVENT, log);
        AccountStateAfterSettlementEventResponse typedResponse = new AccountStateAfterSettlementEventResponse();
        typedResponse.log = log;
        typedResponse.balance = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.blockedAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.debtTotal = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.pendingRefundTotal = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
        return typedResponse;
    }

    public static CardSetEventResponse getCardSetEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(CARDSET_EVENT, log);
        CardSetEventResponse typedResponse = new CardSetEventResponse();
        typedResponse.log = log;
        typedResponse.card = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.otpRoot = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.otpCounter = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public static DebtIncreasedEventResponse getDebtIncreasedEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(DEBTINCREASED_EVENT, log);
        DebtIncreasedEventResponse typedResponse = new DebtIncreasedEventResponse();
        typedResponse.log = log;
        typedResponse.increase = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.debtAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public static List<CardSetEventResponse> getCardSetEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(CARDSET_EVENT, transactionReceipt);
        ArrayList<CardSetEventResponse> responses = new ArrayList<CardSetEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            CardSetEventResponse typedResponse = new CardSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.card = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.otpRoot = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.otpCounter = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static DebtPaidEventResponse getDebtPaidEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(DEBTPAID_EVENT, log);
        DebtPaidEventResponse typedResponse = new DebtPaidEventResponse();
        typedResponse.log = log;
        typedResponse.paid = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.debtLeft = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public static DebtWrittenOffEventResponse getDebtWrittenOffEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(DEBTWRITTENOFF_EVENT, log);
        DebtWrittenOffEventResponse typedResponse = new DebtWrittenOffEventResponse();
        typedResponse.log = log;
        typedResponse.writtenOff = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.debtLeft = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public static List<EIP712DomainChangedEventResponse> getEIP712DomainChangedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(EIP712DOMAINCHANGED_EVENT, transactionReceipt);
        ArrayList<EIP712DomainChangedEventResponse> responses = new ArrayList<EIP712DomainChangedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            EIP712DomainChangedEventResponse typedResponse = new EIP712DomainChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static List<DebtIncreasedEventResponse> getDebtIncreasedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(DEBTINCREASED_EVENT, transactionReceipt);
        ArrayList<DebtIncreasedEventResponse> responses = new ArrayList<DebtIncreasedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            DebtIncreasedEventResponse typedResponse = new DebtIncreasedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.increase = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.debtAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static EIP712DomainChangedEventResponse getEIP712DomainChangedEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(EIP712DOMAINCHANGED_EVENT, log);
        EIP712DomainChangedEventResponse typedResponse = new EIP712DomainChangedEventResponse();
        typedResponse.log = log;
        return typedResponse;
    }

    public static InitializedEventResponse getInitializedEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(INITIALIZED_EVENT, log);
        InitializedEventResponse typedResponse = new InitializedEventResponse();
        typedResponse.log = log;
        typedResponse.version = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public static InsufficientFundsOnForcedAuthEventResponse getInsufficientFundsOnForcedAuthEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(INSUFFICIENTFUNDSONFORCEDAUTH_EVENT, log);
        InsufficientFundsOnForcedAuthEventResponse typedResponse = new InsufficientFundsOnForcedAuthEventResponse();
        typedResponse.log = log;
        typedResponse.transactionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.insufficientAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public static List<DebtPaidEventResponse> getDebtPaidEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(DEBTPAID_EVENT, transactionReceipt);
        ArrayList<DebtPaidEventResponse> responses = new ArrayList<DebtPaidEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            DebtPaidEventResponse typedResponse = new DebtPaidEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.paid = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.debtLeft = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static LimitsSetEventResponse getLimitsSetEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(LIMITSSET_EVENT, log);
        LimitsSetEventResponse typedResponse = new LimitsSetEventResponse();
        typedResponse.log = log;
        typedResponse.singleTransactionLimit = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.spendLimit = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.noOtpSpendLimit = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.spendLimitsPeriod = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
        return typedResponse;
    }

    public static NoOtpTransactionAuthorizedEventResponse getNoOtpTransactionAuthorizedEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(NOOTPTRANSACTIONAUTHORIZED_EVENT, log);
        NoOtpTransactionAuthorizedEventResponse typedResponse = new NoOtpTransactionAuthorizedEventResponse();
        typedResponse.log = log;
        typedResponse.transactionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public static OtpStateSetEventResponse getOtpStateSetEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OTPSTATESET_EVENT, log);
        OtpStateSetEventResponse typedResponse = new OtpStateSetEventResponse();
        typedResponse.log = log;
        typedResponse.otpRoot = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.otpCounter = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public static List<DebtWrittenOffEventResponse> getDebtWrittenOffEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(DEBTWRITTENOFF_EVENT, transactionReceipt);
        ArrayList<DebtWrittenOffEventResponse> responses = new ArrayList<DebtWrittenOffEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            DebtWrittenOffEventResponse typedResponse = new DebtWrittenOffEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.writtenOff = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.debtLeft = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static List<OwnerSetEventResponse> getOwnerSetEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSET_EVENT, transactionReceipt);
        ArrayList<OwnerSetEventResponse> responses = new ArrayList<OwnerSetEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OwnerSetEventResponse typedResponse = new OwnerSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnerSetEventResponse getOwnerSetEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSET_EVENT, log);
        OwnerSetEventResponse typedResponse = new OwnerSetEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public static PendingRefundSavedEventResponse getPendingRefundSavedEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(PENDINGREFUNDSAVED_EVENT, log);
        PendingRefundSavedEventResponse typedResponse = new PendingRefundSavedEventResponse();
        typedResponse.log = log;
        typedResponse.transactionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public static ProcessorSetEventResponse getProcessorSetEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(PROCESSORSET_EVENT, log);
        ProcessorSetEventResponse typedResponse = new ProcessorSetEventResponse();
        typedResponse.log = log;
        typedResponse.processor = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.paymentToken = (String) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public static RefundPaidEventResponse getRefundPaidEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(REFUNDPAID_EVENT, log);
        RefundPaidEventResponse typedResponse = new RefundPaidEventResponse();
        typedResponse.log = log;
        typedResponse.transactionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public static TransactionAmountChangedEventResponse getTransactionAmountChangedEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSACTIONAMOUNTCHANGED_EVENT, log);
        TransactionAmountChangedEventResponse typedResponse = new TransactionAmountChangedEventResponse();
        typedResponse.log = log;
        typedResponse.transactionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public static TransactionAuthorizedEventResponse getTransactionAuthorizedEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSACTIONAUTHORIZED_EVENT, log);
        TransactionAuthorizedEventResponse typedResponse = new TransactionAuthorizedEventResponse();
        typedResponse.log = log;
        typedResponse.transactionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.otp = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.otpCounter = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public static List<InitializedEventResponse> getInitializedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(INITIALIZED_EVENT, transactionReceipt);
        ArrayList<InitializedEventResponse> responses = new ArrayList<InitializedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            InitializedEventResponse typedResponse = new InitializedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.version = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TransactionSettledEventResponse getTransactionSettledEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSACTIONSETTLED_EVENT, log);
        TransactionSettledEventResponse typedResponse = new TransactionSettledEventResponse();
        typedResponse.log = log;
        typedResponse.transactionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.settlementAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.paymentAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public static UnsettledTransactionUnblockedEventResponse getUnsettledTransactionUnblockedEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(UNSETTLEDTRANSACTIONUNBLOCKED_EVENT, log);
        UnsettledTransactionUnblockedEventResponse typedResponse = new UnsettledTransactionUnblockedEventResponse();
        typedResponse.log = log;
        typedResponse.transactionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public static UpgradedEventResponse getUpgradedEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(UPGRADED_EVENT, log);
        UpgradedEventResponse typedResponse = new UpgradedEventResponse();
        typedResponse.log = log;
        typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public static List<InsufficientFundsOnForcedAuthEventResponse> getInsufficientFundsOnForcedAuthEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(INSUFFICIENTFUNDSONFORCEDAUTH_EVENT, transactionReceipt);
        ArrayList<InsufficientFundsOnForcedAuthEventResponse> responses = new ArrayList<InsufficientFundsOnForcedAuthEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            InsufficientFundsOnForcedAuthEventResponse typedResponse = new InsufficientFundsOnForcedAuthEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.transactionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.insufficientAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static VerifiedBalanceIncreasedEventResponse getVerifiedBalanceIncreasedEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(VERIFIEDBALANCEINCREASED_EVENT, log);
        VerifiedBalanceIncreasedEventResponse typedResponse = new VerifiedBalanceIncreasedEventResponse();
        typedResponse.log = log;
        typedResponse.increase = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.verifiedBalance = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public static VerifiedBalanceSetEventResponse getVerifiedBalanceSetEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(VERIFIEDBALANCESET_EVENT, log);
        VerifiedBalanceSetEventResponse typedResponse = new VerifiedBalanceSetEventResponse();
        typedResponse.log = log;
        typedResponse.verifiedBalance = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public static WithdrawalCanceledEventResponse getWithdrawalCanceledEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(WITHDRAWALCANCELED_EVENT, log);
        WithdrawalCanceledEventResponse typedResponse = new WithdrawalCanceledEventResponse();
        typedResponse.log = log;
        return typedResponse;
    }

    public static List<LimitsSetEventResponse> getLimitsSetEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(LIMITSSET_EVENT, transactionReceipt);
        ArrayList<LimitsSetEventResponse> responses = new ArrayList<LimitsSetEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            LimitsSetEventResponse typedResponse = new LimitsSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.singleTransactionLimit = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.spendLimit = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.noOtpSpendLimit = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.spendLimitsPeriod = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static WithdrawalCompleteEventResponse getWithdrawalCompleteEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(WITHDRAWALCOMPLETE_EVENT, log);
        WithdrawalCompleteEventResponse typedResponse = new WithdrawalCompleteEventResponse();
        typedResponse.log = log;
        typedResponse.to = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    @Deprecated
    public static TangemPaymentAccount load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new TangemPaymentAccount(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static TangemPaymentAccount load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new TangemPaymentAccount(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static List<NoOtpTransactionAuthorizedEventResponse> getNoOtpTransactionAuthorizedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(NOOTPTRANSACTIONAUTHORIZED_EVENT, transactionReceipt);
        ArrayList<NoOtpTransactionAuthorizedEventResponse> responses = new ArrayList<NoOtpTransactionAuthorizedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            NoOtpTransactionAuthorizedEventResponse typedResponse = new NoOtpTransactionAuthorizedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.transactionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TangemPaymentAccount load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new TangemPaymentAccount(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static TangemPaymentAccount load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new TangemPaymentAccount(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<TangemPaymentAccount> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String trustedForwarder) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(List.of(new Address(160, trustedForwarder)));
        return deployRemoteCall(TangemPaymentAccount.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static List<OtpStateSetEventResponse> getOtpStateSetEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OTPSTATESET_EVENT, transactionReceipt);
        ArrayList<OtpStateSetEventResponse> responses = new ArrayList<OtpStateSetEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OtpStateSetEventResponse typedResponse = new OtpStateSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.otpRoot = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.otpCounter = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RemoteCall<TangemPaymentAccount> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String trustedForwarder) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(List.of(new Address(160, trustedForwarder)));
        return deployRemoteCall(TangemPaymentAccount.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<TangemPaymentAccount> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String trustedForwarder) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(List.of(new Address(160, trustedForwarder)));
        return deployRemoteCall(TangemPaymentAccount.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<TangemPaymentAccount> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String trustedForwarder) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(List.of(new Address(160, trustedForwarder)));
        return deployRemoteCall(TangemPaymentAccount.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public Flowable<AccountStateAfterSettlementEventResponse> accountStateAfterSettlementEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAccountStateAfterSettlementEventFromLog(log));
    }

    public Flowable<AccountStateAfterSettlementEventResponse> accountStateAfterSettlementEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ACCOUNTSTATEAFTERSETTLEMENT_EVENT));
        return accountStateAfterSettlementEventFlowable(filter);
    }

    public Flowable<CardSetEventResponse> cardSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getCardSetEventFromLog(log));
    }

    public Flowable<CardSetEventResponse> cardSetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CARDSET_EVENT));
        return cardSetEventFlowable(filter);
    }

    public static List<PendingRefundSavedEventResponse> getPendingRefundSavedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PENDINGREFUNDSAVED_EVENT, transactionReceipt);
        ArrayList<PendingRefundSavedEventResponse> responses = new ArrayList<PendingRefundSavedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            PendingRefundSavedEventResponse typedResponse = new PendingRefundSavedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.transactionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DebtIncreasedEventResponse> debtIncreasedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getDebtIncreasedEventFromLog(log));
    }

    public Flowable<DebtIncreasedEventResponse> debtIncreasedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEBTINCREASED_EVENT));
        return debtIncreasedEventFlowable(filter);
    }

    public Flowable<DebtPaidEventResponse> debtPaidEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getDebtPaidEventFromLog(log));
    }

    public static List<ProcessorSetEventResponse> getProcessorSetEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PROCESSORSET_EVENT, transactionReceipt);
        ArrayList<ProcessorSetEventResponse> responses = new ArrayList<ProcessorSetEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ProcessorSetEventResponse typedResponse = new ProcessorSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.processor = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.paymentToken = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DebtPaidEventResponse> debtPaidEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEBTPAID_EVENT));
        return debtPaidEventFlowable(filter);
    }

    public Flowable<DebtWrittenOffEventResponse> debtWrittenOffEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getDebtWrittenOffEventFromLog(log));
    }

    public Flowable<DebtWrittenOffEventResponse> debtWrittenOffEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEBTWRITTENOFF_EVENT));
        return debtWrittenOffEventFlowable(filter);
    }

    public static List<RefundPaidEventResponse> getRefundPaidEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(REFUNDPAID_EVENT, transactionReceipt);
        ArrayList<RefundPaidEventResponse> responses = new ArrayList<RefundPaidEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RefundPaidEventResponse typedResponse = new RefundPaidEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.transactionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<EIP712DomainChangedEventResponse> eIP712DomainChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getEIP712DomainChangedEventFromLog(log));
    }

    public Flowable<EIP712DomainChangedEventResponse> eIP712DomainChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EIP712DOMAINCHANGED_EVENT));
        return eIP712DomainChangedEventFlowable(filter);
    }

    public Flowable<InitializedEventResponse> initializedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getInitializedEventFromLog(log));
    }

    public static List<TransactionAmountChangedEventResponse> getTransactionAmountChangedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSACTIONAMOUNTCHANGED_EVENT, transactionReceipt);
        ArrayList<TransactionAmountChangedEventResponse> responses = new ArrayList<TransactionAmountChangedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransactionAmountChangedEventResponse typedResponse = new TransactionAmountChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.transactionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<InitializedEventResponse> initializedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INITIALIZED_EVENT));
        return initializedEventFlowable(filter);
    }

    public Flowable<InsufficientFundsOnForcedAuthEventResponse> insufficientFundsOnForcedAuthEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getInsufficientFundsOnForcedAuthEventFromLog(log));
    }

    public Flowable<InsufficientFundsOnForcedAuthEventResponse> insufficientFundsOnForcedAuthEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INSUFFICIENTFUNDSONFORCEDAUTH_EVENT));
        return insufficientFundsOnForcedAuthEventFlowable(filter);
    }

    public static List<TransactionAuthorizedEventResponse> getTransactionAuthorizedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSACTIONAUTHORIZED_EVENT, transactionReceipt);
        ArrayList<TransactionAuthorizedEventResponse> responses = new ArrayList<TransactionAuthorizedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransactionAuthorizedEventResponse typedResponse = new TransactionAuthorizedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.transactionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.otp = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.otpCounter = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<LimitsSetEventResponse> limitsSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getLimitsSetEventFromLog(log));
    }

    public Flowable<LimitsSetEventResponse> limitsSetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LIMITSSET_EVENT));
        return limitsSetEventFlowable(filter);
    }

    public Flowable<NoOtpTransactionAuthorizedEventResponse> noOtpTransactionAuthorizedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getNoOtpTransactionAuthorizedEventFromLog(log));
    }

    public static List<TransactionSettledEventResponse> getTransactionSettledEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSACTIONSETTLED_EVENT, transactionReceipt);
        ArrayList<TransactionSettledEventResponse> responses = new ArrayList<TransactionSettledEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransactionSettledEventResponse typedResponse = new TransactionSettledEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.transactionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.settlementAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.paymentAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NoOtpTransactionAuthorizedEventResponse> noOtpTransactionAuthorizedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NOOTPTRANSACTIONAUTHORIZED_EVENT));
        return noOtpTransactionAuthorizedEventFlowable(filter);
    }

    public Flowable<OtpStateSetEventResponse> otpStateSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOtpStateSetEventFromLog(log));
    }

    public Flowable<OtpStateSetEventResponse> otpStateSetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OTPSTATESET_EVENT));
        return otpStateSetEventFlowable(filter);
    }

    public static List<UnsettledTransactionUnblockedEventResponse> getUnsettledTransactionUnblockedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(UNSETTLEDTRANSACTIONUNBLOCKED_EVENT, transactionReceipt);
        ArrayList<UnsettledTransactionUnblockedEventResponse> responses = new ArrayList<UnsettledTransactionUnblockedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UnsettledTransactionUnblockedEventResponse typedResponse = new UnsettledTransactionUnblockedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.transactionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnerSetEventResponse> ownerSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnerSetEventFromLog(log));
    }

    public Flowable<OwnerSetEventResponse> ownerSetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSET_EVENT));
        return ownerSetEventFlowable(filter);
    }

    public Flowable<PendingRefundSavedEventResponse> pendingRefundSavedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getPendingRefundSavedEventFromLog(log));
    }

    public static List<UpgradedEventResponse> getUpgradedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(UPGRADED_EVENT, transactionReceipt);
        ArrayList<UpgradedEventResponse> responses = new ArrayList<UpgradedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UpgradedEventResponse typedResponse = new UpgradedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<PendingRefundSavedEventResponse> pendingRefundSavedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PENDINGREFUNDSAVED_EVENT));
        return pendingRefundSavedEventFlowable(filter);
    }

    public Flowable<ProcessorSetEventResponse> processorSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getProcessorSetEventFromLog(log));
    }

    public Flowable<ProcessorSetEventResponse> processorSetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PROCESSORSET_EVENT));
        return processorSetEventFlowable(filter);
    }

    public static List<VerifiedBalanceIncreasedEventResponse> getVerifiedBalanceIncreasedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(VERIFIEDBALANCEINCREASED_EVENT, transactionReceipt);
        ArrayList<VerifiedBalanceIncreasedEventResponse> responses = new ArrayList<VerifiedBalanceIncreasedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            VerifiedBalanceIncreasedEventResponse typedResponse = new VerifiedBalanceIncreasedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.increase = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.verifiedBalance = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RefundPaidEventResponse> refundPaidEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRefundPaidEventFromLog(log));
    }

    public Flowable<RefundPaidEventResponse> refundPaidEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REFUNDPAID_EVENT));
        return refundPaidEventFlowable(filter);
    }

    public Flowable<TransactionAmountChangedEventResponse> transactionAmountChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTransactionAmountChangedEventFromLog(log));
    }

    public static List<VerifiedBalanceSetEventResponse> getVerifiedBalanceSetEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(VERIFIEDBALANCESET_EVENT, transactionReceipt);
        ArrayList<VerifiedBalanceSetEventResponse> responses = new ArrayList<VerifiedBalanceSetEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            VerifiedBalanceSetEventResponse typedResponse = new VerifiedBalanceSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.verifiedBalance = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransactionAmountChangedEventResponse> transactionAmountChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSACTIONAMOUNTCHANGED_EVENT));
        return transactionAmountChangedEventFlowable(filter);
    }

    public Flowable<TransactionAuthorizedEventResponse> transactionAuthorizedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTransactionAuthorizedEventFromLog(log));
    }

    public Flowable<TransactionAuthorizedEventResponse> transactionAuthorizedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSACTIONAUTHORIZED_EVENT));
        return transactionAuthorizedEventFlowable(filter);
    }

    public static List<WithdrawalCanceledEventResponse> getWithdrawalCanceledEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(WITHDRAWALCANCELED_EVENT, transactionReceipt);
        ArrayList<WithdrawalCanceledEventResponse> responses = new ArrayList<WithdrawalCanceledEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            WithdrawalCanceledEventResponse typedResponse = new WithdrawalCanceledEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransactionSettledEventResponse> transactionSettledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTransactionSettledEventFromLog(log));
    }

    public Flowable<TransactionSettledEventResponse> transactionSettledEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSACTIONSETTLED_EVENT));
        return transactionSettledEventFlowable(filter);
    }

    public Flowable<UnsettledTransactionUnblockedEventResponse> unsettledTransactionUnblockedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getUnsettledTransactionUnblockedEventFromLog(log));
    }

    public static List<WithdrawalCompleteEventResponse> getWithdrawalCompleteEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(WITHDRAWALCOMPLETE_EVENT, transactionReceipt);
        ArrayList<WithdrawalCompleteEventResponse> responses = new ArrayList<WithdrawalCompleteEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            WithdrawalCompleteEventResponse typedResponse = new WithdrawalCompleteEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.to = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UnsettledTransactionUnblockedEventResponse> unsettledTransactionUnblockedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UNSETTLEDTRANSACTIONUNBLOCKED_EVENT));
        return unsettledTransactionUnblockedEventFlowable(filter);
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getUpgradedEventFromLog(log));
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPGRADED_EVENT));
        return upgradedEventFlowable(filter);
    }

    public static List<WithdrawalInitiatedEventResponse> getWithdrawalInitiatedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(WITHDRAWALINITIATED_EVENT, transactionReceipt);
        ArrayList<WithdrawalInitiatedEventResponse> responses = new ArrayList<WithdrawalInitiatedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            WithdrawalInitiatedEventResponse typedResponse = new WithdrawalInitiatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.readyToWithdrawTimestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static WithdrawalInitiatedEventResponse getWithdrawalInitiatedEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(WITHDRAWALINITIATED_EVENT, log);
        WithdrawalInitiatedEventResponse typedResponse = new WithdrawalInitiatedEventResponse();
        typedResponse.log = log;
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.readyToWithdrawTimestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<WithdrawalInitiatedEventResponse> withdrawalInitiatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getWithdrawalInitiatedEventFromLog(log));
    }

    public Flowable<WithdrawalInitiatedEventResponse> withdrawalInitiatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAWALINITIATED_EVENT));
        return withdrawalInitiatedEventFlowable(filter);
    }

    public Flowable<VerifiedBalanceIncreasedEventResponse> verifiedBalanceIncreasedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getVerifiedBalanceIncreasedEventFromLog(log));
    }

    public Flowable<VerifiedBalanceIncreasedEventResponse> verifiedBalanceIncreasedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VERIFIEDBALANCEINCREASED_EVENT));
        return verifiedBalanceIncreasedEventFlowable(filter);
    }

    public Flowable<VerifiedBalanceSetEventResponse> verifiedBalanceSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getVerifiedBalanceSetEventFromLog(log));
    }

    public Flowable<VerifiedBalanceSetEventResponse> verifiedBalanceSetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VERIFIEDBALANCESET_EVENT));
        return verifiedBalanceSetEventFlowable(filter);
    }

    public Flowable<WithdrawalCanceledEventResponse> withdrawalCanceledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getWithdrawalCanceledEventFromLog(log));
    }

    public Flowable<WithdrawalCanceledEventResponse> withdrawalCanceledEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAWALCANCELED_EVENT));
        return withdrawalCanceledEventFlowable(filter);
    }

    public Flowable<WithdrawalCompleteEventResponse> withdrawalCompleteEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getWithdrawalCompleteEventFromLog(log));
    }

    public Flowable<WithdrawalCompleteEventResponse> withdrawalCompleteEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAWALCOMPLETE_EVENT));
        return withdrawalCompleteEventFlowable(filter);
    }

    public RemoteFunctionCall<String> UPGRADE_INTERFACE_VERSION() {
        final Function function = new Function(FUNC_UPGRADE_INTERFACE_VERSION,
                List.of(),
                List.of(new TypeReference<Utf8String>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple3<BigInteger, BigInteger, Boolean>> authorizedTransactions(BigInteger param0) {
        final Function function = new Function(FUNC_AUTHORIZEDTRANSACTIONS,
                List.of(new Uint256(param0)),
                Arrays.asList(new TypeReference<Uint256>() {
                }, new TypeReference<Uint128>() {
                }, new TypeReference<Bool>() {
                }));
        return new RemoteFunctionCall<Tuple3<BigInteger, BigInteger, Boolean>>(function,
                new Callable<Tuple3<BigInteger, BigInteger, Boolean>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, Boolean>(
                                (BigInteger) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (Boolean) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> availableForDebtPayment() {
        final Function function = new Function(FUNC_AVAILABLEFORDEBTPAYMENT,
                List.of(),
                List.of(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> availableForPayment() {
        final Function function = new Function(FUNC_AVAILABLEFORPAYMENT,
                List.of(),
                List.of(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> availableForWithdrawal() {
        final Function function = new Function(FUNC_AVAILABLEFORWITHDRAWAL,
                List.of(),
                List.of(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> blockedAmount() {
        final Function function = new Function(FUNC_BLOCKEDAMOUNT,
                List.of(),
                List.of(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> cancelWithdrawal() {
        final Function function = new Function(
                FUNC_CANCELWITHDRAWAL,
                List.of(),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple3<CardWithOtp, CardWithOtp, BigInteger>> cardWithOtp() {
        final Function function = new Function(FUNC_CARDWITHOTP,
                List.of(),
                Arrays.asList(new TypeReference<CardWithOtp>() {
                }, new TypeReference<CardWithOtp>() {
                }, new TypeReference<Uint256>() {
                }));
        return new RemoteFunctionCall<Tuple3<CardWithOtp, CardWithOtp, BigInteger>>(function,
                new Callable<Tuple3<CardWithOtp, CardWithOtp, BigInteger>>() {
                    @Override
                    public Tuple3<CardWithOtp, CardWithOtp, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<CardWithOtp, CardWithOtp, BigInteger>(
                                (CardWithOtp) results.get(0),
                                (CardWithOtp) results.get(1),
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> debtAmount() {
        final Function function = new Function(FUNC_DEBTAMOUNT,
                List.of(),
                List.of(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>> eip712Domain() {
        final Function function = new Function(FUNC_EIP712DOMAIN,
                List.of(),
                Arrays.asList(new TypeReference<Bytes1>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Uint256>() {
                }, new TypeReference<Address>() {
                }, new TypeReference<Bytes32>() {
                }, new TypeReference<DynamicArray<Uint256>>() {
                }));
        return new RemoteFunctionCall<Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>>(function,
                new Callable<Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>>() {
                    @Override
                    public Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>(
                                (byte[]) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue(),
                                (String) results.get(4).getValue(),
                                (byte[]) results.get(5).getValue(),
                                convertToNative((List<Uint256>) results.get(6).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<String> factory() {
        final Function function = new Function(FUNC_FACTORY,
                List.of(),
                List.of(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> increaseVerifiedBalance(BigInteger increase) {
        final Function function = new Function(
                FUNC_INCREASEVERIFIEDBALANCE,
                List.of(new Uint256(increase)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> initWithdrawal(BigInteger amount) {
        final Function function = new Function(
                FUNC_INITWITHDRAWAL,
                List.of(new Uint256(amount)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize(String owner_, String registry_, BigInteger singleTransactionLimit, BigInteger spendLimit, BigInteger noOtpSpendLimit, BigInteger spendLimitsPeriod) {
        final Function function = new Function(
                FUNC_INITIALIZE,
                Arrays.asList(new Address(160, owner_),
                        new Address(160, registry_),
                        new Uint256(singleTransactionLimit),
                        new Uint256(spendLimit),
                        new Uint256(noOtpSpendLimit),
                        new Uint256(spendLimitsPeriod)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> isTrustedForwarder(String forwarder) {
        final Function function = new Function(FUNC_ISTRUSTEDFORWARDER,
                List.of(new Address(160, forwarder)),
                List.of(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isWithdrawalInProgress() {
        final Function function = new Function(FUNC_ISWITHDRAWALINPROGRESS,
                List.of(),
                List.of(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isWithdrawalReady() {
        final Function function = new Function(FUNC_ISWITHDRAWALREADY,
                List.of(),
                List.of(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Tuple3<Limits, Limits, BigInteger>> limits() {
        final Function function = new Function(FUNC_LIMITS,
                List.of(),
                Arrays.asList(new TypeReference<Limits>() {
                }, new TypeReference<Limits>() {
                }, new TypeReference<Uint256>() {
                }));
        return new RemoteFunctionCall<Tuple3<Limits, Limits, BigInteger>>(function,
                new Callable<Tuple3<Limits, Limits, BigInteger>>() {
                    @Override
                    public Tuple3<Limits, Limits, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<Limits, Limits, BigInteger>(
                                (Limits) results.get(0),
                                (Limits) results.get(1),
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER,
                List.of(),
                List.of(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> ownershipAcceptanceNonce() {
        final Function function = new Function(FUNC_OWNERSHIPACCEPTANCENONCE,
                List.of(),
                List.of(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> paymentToken() {
        final Function function = new Function(FUNC_PAYMENTTOKEN,
                List.of(),
                List.of(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> pendingRefundAmount(BigInteger transactionId) {
        final Function function = new Function(FUNC_PENDINGREFUNDAMOUNT,
                List.of(new Uint256(transactionId)),
                List.of(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> pendingRefundTotal() {
        final Function function = new Function(FUNC_PENDINGREFUNDTOTAL,
                List.of(),
                List.of(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> processAuthorization(BigInteger transactionId, BigInteger amount, byte[] otp, BigInteger otpCounter, Boolean forced) {
        final Function function = new Function(
                FUNC_PROCESSAUTHORIZATION,
                Arrays.asList(new Uint256(transactionId),
                        new Uint256(amount),
                        new Bytes16(otp),
                        new Uint16(otpCounter),
                        new Bool(forced)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> processAuthorizationChange(BigInteger transactionId, BigInteger newAmount) {
        final Function function = new Function(
                FUNC_PROCESSAUTHORIZATIONCHANGE,
                Arrays.asList(new Uint256(transactionId),
                        new Uint256(newAmount)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> processAuthorizationNoOtp(BigInteger transactionId, BigInteger amount, Boolean forced) {
        final Function function = new Function(
                FUNC_PROCESSAUTHORIZATIONNOOTP,
                Arrays.asList(new Uint256(transactionId),
                        new Uint256(amount),
                        new Bool(forced)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> processDebt(BigInteger amount) {
        final Function function = new Function(
                FUNC_PROCESSDEBT,
                List.of(new Uint256(amount)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> processPendingRefundPayment(BigInteger transactionId) {
        final Function function = new Function(
                FUNC_PROCESSPENDINGREFUNDPAYMENT,
                List.of(new Uint256(transactionId)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> processRefundPayment(BigInteger transactionId) {
        final Function function = new Function(
                FUNC_PROCESSREFUNDPAYMENT,
                List.of(new Uint256(transactionId)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> processSettlement(BigInteger transactionId, BigInteger amount) {
        final Function function = new Function(
                FUNC_PROCESSSETTLEMENT,
                Arrays.asList(new Uint256(transactionId),
                        new Uint256(amount)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> processWithdrawal(String to) {
        final Function function = new Function(
                FUNC_PROCESSWITHDRAWAL,
                List.of(new Address(160, to)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> processor() {
        final Function function = new Function(FUNC_PROCESSOR,
                List.of(),
                List.of(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<byte[]> proxiableUUID() {
        final Function function = new Function(FUNC_PROXIABLEUUID,
                List.of(),
                List.of(new TypeReference<Bytes32>() {
                }));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<String> registry() {
        final Function function = new Function(FUNC_REGISTRY,
                List.of(),
                List.of(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> savePendingRefund(BigInteger transactionId, BigInteger amount) {
        final Function function = new Function(
                FUNC_SAVEPENDINGREFUND,
                Arrays.asList(new Uint256(transactionId),
                        new Uint256(amount)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> securityDelay() {
        final Function function = new Function(FUNC_SECURITYDELAY,
                List.of(),
                List.of(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> setCard(String card, byte[] otpRoot, BigInteger otpCounter, byte[] ownershipAcceptanceSignature) {
        final Function function = new Function(
                FUNC_SETCARD,
                Arrays.asList(new Address(160, card),
                        new Bytes16(otpRoot),
                        new Uint16(otpCounter),
                        new org.web3j.abi.datatypes.DynamicBytes(ownershipAcceptanceSignature)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setLimits(BigInteger singleTransactionLimit, BigInteger spendLimit, BigInteger noOtpSpendLimit, BigInteger spendLimitsPeriod) {
        final Function function = new Function(
                FUNC_SETLIMITS,
                Arrays.asList(new Uint256(singleTransactionLimit),
                        new Uint256(spendLimit),
                        new Uint256(noOtpSpendLimit),
                        new Uint256(spendLimitsPeriod)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setOtpState(byte[] otp, BigInteger counter) {
        final Function function = new Function(
                FUNC_SETOTPSTATE,
                Arrays.asList(new Bytes16(otp),
                        new Uint16(counter)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setOwner(String owner_, byte[] ownershipAcceptanceSignature) {
        final Function function = new Function(
                FUNC_SETOWNER,
                Arrays.asList(new Address(160, owner_),
                        new org.web3j.abi.datatypes.DynamicBytes(ownershipAcceptanceSignature)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setProcessor(String processor_) {
        final Function function = new Function(
                FUNC_SETPROCESSOR,
                List.of(new Address(160, processor_)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setVerifiedBalance(BigInteger verifiedBalance_) {
        final Function function = new Function(
                FUNC_SETVERIFIEDBALANCE,
                List.of(new Uint256(verifiedBalance_)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> settlementPeriod() {
        final Function function = new Function(FUNC_SETTLEMENTPERIOD,
                List.of(),
                List.of(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> trustedForwarder() {
        final Function function = new Function(FUNC_TRUSTEDFORWARDER,
                List.of(),
                List.of(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> unblockUnsettledTransaction(BigInteger transactionId) {
        final Function function = new Function(
                FUNC_UNBLOCKUNSETTLEDTRANSACTION,
                List.of(new Uint256(transactionId)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> upgradeToAndCall(String newImplementation, byte[] data, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_UPGRADETOANDCALL,
                Arrays.asList(new Address(160, newImplementation),
                        new org.web3j.abi.datatypes.DynamicBytes(data)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<BigInteger> verifiedBalance() {
        final Function function = new Function(FUNC_VERIFIEDBALANCE,
                List.of(),
                List.of(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> withdrawalAmount() {
        final Function function = new Function(FUNC_WITHDRAWALAMOUNT,
                List.of(),
                List.of(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> withdrawalReadyTimestamp() {
        final Function function = new Function(FUNC_WITHDRAWALREADYTIMESTAMP,
                List.of(),
                List.of(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> writeOffDebt(BigInteger amount) {
        final Function function = new Function(
                FUNC_WRITEOFFDEBT,
                List.of(new Uint256(amount)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static class OtpState extends StaticStruct {
        public byte[] otp;

        public BigInteger counter;

        public OtpState(byte[] otp, BigInteger counter) {
            super(new Bytes16(otp),
                    new Uint16(counter));
            this.otp = otp;
            this.counter = counter;
        }

        public OtpState(Bytes16 otp, Uint16 counter) {
            super(otp, counter);
            this.otp = otp.getValue();
            this.counter = counter.getValue();
        }
    }

    public static class Limit extends StaticStruct {
        public BigInteger _00_limit;

        public BigInteger _01_spent;

        public Limit(BigInteger limit, BigInteger spent) {
            super(new Uint256(limit),
                    new Uint256(spent));
            this._00_limit = limit;
            this._01_spent = spent;
        }

        public Limit(Uint256 limit, Uint256 spent) {
            super(limit, spent);
            this._00_limit = limit.getValue();
            this._01_spent = spent.getValue();
        }
    }

    public static class Timer extends StaticStruct {
        public BigInteger expireTimestamp;

        public Timer(BigInteger expireTimestamp) {
            super(new Uint256(expireTimestamp));
            this.expireTimestamp = expireTimestamp;
        }

        public Timer(Uint256 expireTimestamp) {
            super(expireTimestamp);
            this.expireTimestamp = expireTimestamp.getValue();
        }
    }

    public static class CardWithOtp extends StaticStruct {
        public String card;

        public OtpState otpState;

        public CardWithOtp(String card, OtpState otpState) {
            super(new Address(160, card),
                    otpState);
            this.card = card;
            this.otpState = otpState;
        }

        public CardWithOtp(Address card, OtpState otpState) {
            super(card, otpState);
            this.card = card.getValue();
            this.otpState = otpState;
        }
    }

    public static class Limits extends StaticStruct {
        public BigInteger _00_singleTransactionLimit;

        public Limit _01_spendLimit;

        public Limit _02_noOtpSpendLimit;

        public Timer _03_spendLimitsTimer;

        public BigInteger _04_spendLimitsPeriod;

        public Limits(BigInteger singleTransactionLimit, Limit spendLimit, Limit noOtpSpendLimit, Timer spendLimitsTimer, BigInteger spendLimitsPeriod) {
            super(new Uint256(singleTransactionLimit),
                    spendLimit,
                    noOtpSpendLimit,
                    spendLimitsTimer, 
                    new Uint256(spendLimitsPeriod));
            this._00_singleTransactionLimit = singleTransactionLimit;
            this._01_spendLimit = spendLimit;
            this._02_noOtpSpendLimit = noOtpSpendLimit;
            this._03_spendLimitsTimer = spendLimitsTimer;
            this._04_spendLimitsPeriod = spendLimitsPeriod;
        }

        public Limits(Uint256 singleTransactionLimit, Limit spendLimit, Limit noOtpSpendLimit, Timer spendLimitsTimer, Uint256 spendLimitsPeriod) {
            super(singleTransactionLimit, spendLimit, noOtpSpendLimit, spendLimitsTimer, spendLimitsPeriod);
            this._00_singleTransactionLimit = singleTransactionLimit.getValue();
            this._01_spendLimit = spendLimit;
            this._02_noOtpSpendLimit = noOtpSpendLimit;
            this._03_spendLimitsTimer = spendLimitsTimer;
            this._04_spendLimitsPeriod = spendLimitsPeriod.getValue();
        }
    }

    public static class AccountStateAfterSettlementEventResponse extends BaseEventResponse {
        public BigInteger balance;

        public BigInteger blockedAmount;

        public BigInteger debtTotal;

        public BigInteger pendingRefundTotal;
    }

    public static class CardSetEventResponse extends BaseEventResponse {
        public String card;

        public byte[] otpRoot;

        public BigInteger otpCounter;
    }

    public static class DebtIncreasedEventResponse extends BaseEventResponse {
        public BigInteger increase;

        public BigInteger debtAmount;
    }

    public static class DebtPaidEventResponse extends BaseEventResponse {
        public BigInteger paid;

        public BigInteger debtLeft;
    }

    public static class DebtWrittenOffEventResponse extends BaseEventResponse {
        public BigInteger writtenOff;

        public BigInteger debtLeft;
    }

    public static class EIP712DomainChangedEventResponse extends BaseEventResponse {
    }

    public static class InitializedEventResponse extends BaseEventResponse {
        public BigInteger version;
    }

    public static class InsufficientFundsOnForcedAuthEventResponse extends BaseEventResponse {
        public BigInteger transactionId;

        public BigInteger insufficientAmount;
    }

    public static class LimitsSetEventResponse extends BaseEventResponse {
        public BigInteger singleTransactionLimit;

        public BigInteger spendLimit;

        public BigInteger noOtpSpendLimit;

        public BigInteger spendLimitsPeriod;
    }

    public static class NoOtpTransactionAuthorizedEventResponse extends BaseEventResponse {
        public BigInteger transactionId;

        public BigInteger amount;
    }

    public static class OtpStateSetEventResponse extends BaseEventResponse {
        public byte[] otpRoot;

        public BigInteger otpCounter;
    }

    public static class OwnerSetEventResponse extends BaseEventResponse {
        public String owner;
    }

    public static class PendingRefundSavedEventResponse extends BaseEventResponse {
        public BigInteger transactionId;

        public BigInteger amount;
    }

    public static class ProcessorSetEventResponse extends BaseEventResponse {
        public String processor;

        public String paymentToken;
    }

    public static class RefundPaidEventResponse extends BaseEventResponse {
        public BigInteger transactionId;

        public BigInteger amount;
    }

    public static class TransactionAmountChangedEventResponse extends BaseEventResponse {
        public BigInteger transactionId;

        public BigInteger newAmount;
    }

    public static class TransactionAuthorizedEventResponse extends BaseEventResponse {
        public BigInteger transactionId;

        public BigInteger amount;

        public byte[] otp;

        public BigInteger otpCounter;
    }

    public static class TransactionSettledEventResponse extends BaseEventResponse {
        public BigInteger transactionId;

        public BigInteger settlementAmount;

        public BigInteger paymentAmount;
    }

    public static class UnsettledTransactionUnblockedEventResponse extends BaseEventResponse {
        public BigInteger transactionId;

        public BigInteger amount;
    }

    public static class UpgradedEventResponse extends BaseEventResponse {
        public String implementation;
    }

    public static class VerifiedBalanceIncreasedEventResponse extends BaseEventResponse {
        public BigInteger increase;

        public BigInteger verifiedBalance;
    }

    public static class VerifiedBalanceSetEventResponse extends BaseEventResponse {
        public BigInteger verifiedBalance;
    }

    public static class WithdrawalCanceledEventResponse extends BaseEventResponse {
    }

    public static class WithdrawalCompleteEventResponse extends BaseEventResponse {
        public String to;

        public BigInteger amount;
    }

    public static class WithdrawalInitiatedEventResponse extends BaseEventResponse {
        public BigInteger amount;

        public BigInteger readyToWithdrawTimestamp;
    }
}
