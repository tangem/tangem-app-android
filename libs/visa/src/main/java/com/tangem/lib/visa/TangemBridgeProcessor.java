package com.tangem.lib.visa;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.StaticStruct;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes16;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint16;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.6.1.
 */
@SuppressWarnings("rawtypes")
public class TangemBridgeProcessor extends Contract {
    public static final String BINARY = "608060405234620000345762000022620000186200012e565b939290926200022c565b604051612dc86200057b8239612dc890f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b038211176200007157604052565b62000039565b906200008e6200008660405190565b92836200004f565b565b6001600160a01b031690565b90565b6001600160a01b0381165b036200003457565b905051906200008e826200009f565b80620000aa565b905051906200008e82620000c1565b919060a0838203126200003457620000f08184620000b2565b92620001008260208301620000b2565b926200009c620001148460408501620000b2565b936080620001268260608701620000b2565b9401620000c8565b620001516200334380380380620001458162000077565b928339810190620000d7565b9091929394565b906001600160a01b03905b9181191691161790565b6200009c9062000090906001600160a01b031682565b6200009c906200016d565b6200009c9062000183565b90620001ad6200009c620001b5926200018e565b825462000158565b9055565b90610100600160a81b039060081b62000163565b90620001e16200009c620001b5926200018e565b8254620001b9565b906000199062000163565b6200009c6200009c6200009c9290565b90620002186200009c620001b592620001f4565b8254620001e9565b6200009c6000620001f4565b92620002676200026d6200027d946200026762000275956200025f620002859a9962000257620002c3565b600462000199565b600562000199565b6200018e565b6002620001cd565b600362000199565b600662000204565b6200029b6200029362000220565b3390620002e1565b50565b9060ff9062000163565b90620002bb6200009c620001b592151590565b82546200029e565b6200008e60006002620002a8565b905b600052602052604060002090565b620002ed828262000324565b9182620002f957505090565b6200030e6200009c62000314936001620002d1565b620003d2565b5090565b90620002d3906200018e565b6200033862000334838362000419565b1590565b15620003b8576200036460016200035e846000620003578682620002d1565b0162000318565b620002a8565b620003836200037c62000375339390565b936200018e565b916200018e565b917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d620003af60405190565b600090a4600190565b5050600090565b6200009c9081906001600160a01b031681565b906200040c6200040862000402620003fc60006200009c96620003f3600090565b50019462000183565b620003bf565b620001f4565b9190565b620004e4565b5460ff1690565b6200009c916000620003576200043a9362000432600090565b5082620002d1565b62000412565b634e487b7160e01b600052603260045260246000fd5b80548210156200047b5762000472600191600052602060002090565b91020190600090565b62000440565b9160001960089290920291821b911b62000163565b9190620004a86200009c620001b59390565b90835462000481565b9081549168010000000000000000831015620000715782620004dd9160016200008e9501815562000456565b9062000496565b620004f462000334838362000542565b15620003b8576200052991620005239060016200051b84620005178482620004b1565b5490565b9301620002d1565b62000204565b600190565b6200009c9081565b6200009c90546200052e565b620005659160016200055f9262000557600090565b5001620002d1565b62000536565b62000575620004086000620001f4565b14159056fe6080604052600436101561001257600080fd5b60003560e01c806301ffc9a71461030257806311dce771146102fd578063248a9ca3146102f857806328e14f24146102f35780632cc32641146102ee5780632e44b939146102e95780632f2ff15d146102e45780633013ce29146102df57806336568abe146102da5780633c1a5012146102d55780633d409a86146102d05780633f4ba83a146102cb57806341d2ac20146102c65780634413e098146102c157806356737951146102bc5780635c975abb146102b757806365ebf99a146102b257806368b40573146102ad5780636a7554c0146102a857806370e4306e146102a35780637123925e1461029e57806383af133d146102995780638456cb59146102945780639010d07c1461028f57806391d148541461028a5780639353ce4c1461028557806396bc563d14610280578063978975591461027b57806399fef6bb146102765780639e4da86214610271578063a217fddf1461026c578063a9eb7b5a14610267578063aca821f714610262578063b77c6d351461025d578063be4d185114610258578063c0e678f814610253578063c8de6d171461024e578063ca15c87314610249578063cb37f3b214610244578063d47ae89c1461023f578063d547741f1461023a578063d595130814610235578063d6d32b2a14610230578063e0a86ef71461022b578063e63ab1e914610226578063eb465bca146102215763f0cb94980361031a57610d95565b610d76565b610cce565b610caf565b610c04565b610be8565b610bcf565b610bb4565b610b77565b610b50565b610b37565b610b1b565b610a9f565b610a78565b610a50565b610a37565b610a1c565b6109c4565b6109a9565b610970565b610949565b610910565b6108f4565b6108be565b61088a565b610871565b610838565b6107ff565b6107e6565b6107ca565b61077d565b61075e565b610725565b61070c565b6106d7565b61068f565b610668565b610650565b610637565b610610565b61058d565b610548565b61046a565b610431565b6103fa565b6103b6565b610349565b6001600160e01b031981165b0361031a57565b600080fd5b9050359061032c82610307565b565b9060208282031261031a576103429161031f565b90565b9052565b3461031a5761037661036461035f36600461032e565b610dce565b60405191829182901515815260200190565b0390f35b6001600160a01b031690565b6001600160a01b038116610313565b9050359061032c82610386565b9060208282031261031a5761034291610395565b3461031a576103ce6103c93660046103a2565b610e81565b604051005b80610313565b9050359061032c826103d3565b9060208282031261031a57610342916103d9565b3461031a576103766104156104103660046103e6565b610eab565b6040515b9182918290815260200190565b600091031261031a57565b3461031a57610441366004610426565b6103767f350e76a198c654a14c1f5ccac917c5f939f08970b53375e57483f9623a24399c610415565b3461031a5761047a366004610426565b6103ce611072565b908160e091031261031a5790565b909182601f8301121561031a5781359167ffffffffffffffff831161031a57602001926001830284011161031a57565b6101808183031261031a576104d58282610395565b926104e38360208401610395565b926104f18160408501610482565b926105008261012083016103d9565b9261014082013567ffffffffffffffff811161031a5783610522918401610490565b92909361016082013567ffffffffffffffff811161031a576105449201610490565b9091565b3461031a576103ce61055b3660046104c0565b969590959491949392936113fd565b919060408382031261031a5761034290602061058682866103d9565b9401610395565b3461031a576103ce6105a036600461056a565b9061142b565b610342916008021c6001600160a01b031690565b9061034291546105a6565b610342600060036105ba565b6103429061037a906001600160a01b031682565b610342906105d1565b610342906105e5565b610345906105ee565b60208101929161032c91906105f7565b3461031a57610620366004610426565b61037661062b6105c5565b60405191829182610600565b3461031a576103ce61064a36600461056a565b90611435565b3461031a576103ce6106633660046103a2565b611530565b3461031a57610678366004610426565b610376600080516020612d73833981519152610415565b3461031a5761069f366004610426565b6103ce61156d565b909160608284031261031a576103426106c08484610395565b9360406106d08260208701610395565b94016103d9565b3461031a576103ce6106ea3660046106a7565b916116eb565b919060408382031261031a576103429060206106d08286610395565b3461031a576103ce61071f3660046106f0565b906117a3565b3461031a57610735366004610426565b6103767fd77cc12a543481a2b3ef8fd055979569715a10db9879cd9e664395eca3a54dff610415565b3461031a5761076e366004610426565b61037661036460025460ff1690565b3461031a576103ce6107903660046103a2565b6117f8565b60808183031261031a576107a98282610395565b926103426107ba8460208501610395565b9360606106d082604087016103d9565b3461031a576103ce6107dd366004610795565b92919091611a60565b3461031a576103ce6107f93660046106f0565b90611b0f565b3461031a5761080f366004610426565b6103767f6ac2c8b5322a929d300af17766189693ff6db6939ffe690430ad4720baf47d1c610415565b3461031a57610848366004610426565b6103767fca900a2e3cfbbbb78b9095304e53ddb6de902bbef4638bd3c79fe9cf3a441202610415565b3461031a576103ce6108843660046106f0565b90611bbc565b3461031a5761089a366004610426565b6103ce611bfa565b919060408382031261031a576103429060206106d082866103d9565b3461031a576103766108da6108d43660046108a2565b90611c02565b604051918291826001600160a01b03909116815260200190565b3461031a5761037661036461090a36600461056a565b90611c2c565b3461031a57610920366004610426565b6103767f79af5a85184b45263c1b3721b9c8eb1becd98e55ade5a61da0fed18b90b83256610415565b3461031a57610959366004610426565b610376600080516020612d53833981519152610415565b3461031a57610980366004610426565b6103767f581be84b4822abe392a3bcac0d4d656e4cd57faf2e321a32108215cdd4a83656610415565b3461031a576103766103646109bf3660046103a2565b611c55565b3461031a576109d4366004610426565b6103767f863747851594ece3a3681369cf3710069c605efc30fccffb517283afa5efce91610415565b6103426103426103429290565b61034260006109fd565b610342610a0a565b3461031a57610a2c366004610426565b610376610415610a14565b3461031a576103ce610a4a3660046106a7565b91611d3b565b3461031a576103ce610a63366004610795565b92919091611e22565b610342600160026105ba565b3461031a57610a88366004610426565b61037661062b610a6c565b610342600060056105ba565b3461031a57610aaf366004610426565b6103766108da610a93565b801515610313565b9050359061032c82610aba565b919060a08382031261031a57610ae58184610395565b92610af38260208301610395565b92610342610b0484604085016103d9565b936080610b1482606087016103d9565b9401610ac2565b3461031a576103ce610b2e366004610acf565b93929092611f2f565b3461031a576103ce610b4a3660046106a7565b91611ff3565b3461031a57610376610415610b663660046103e6565b611ffe565b610342600060046105ba565b3461031a57610b87366004610426565b6103766108da610b6b565b610342916008021c81565b906103429154610b92565b61034260006006610b9d565b3461031a57610bc4366004610426565b610376610415610ba8565b3461031a576103ce610be236600461056a565b90612030565b3461031a576103ce610bfb366004610795565b929190916120fc565b3461031a576103ce610c173660046103e6565b6121ce565b6001600160801b03198116610313565b9050359061032c82610c1c565b61ffff8116610313565b9050359061032c82610c39565b60e08183031261031a57610c648282610395565b92610c728360208401610395565b92610c8081604085016103d9565b92610c8e82606083016103d9565b92610342610c9f8460808501610c2c565b9360c0610b148260a08701610c43565b3461031a576103ce610cc2366004610c50565b959490949391936122b4565b3461031a57610cde366004610426565b6103767f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610415565b9060c08282031261031a57610d1c8183610395565b92610d2a8260208501610395565b92610d3883604083016103d9565b92610d4681606084016103d9565b92608083013567ffffffffffffffff811161031a5782610d6d60a094610342938701610490565b94909501610ac2565b3461031a576103ce610d89366004610d07565b95949094939193612397565b3461031a57610da5366004610426565b6103767f7245419aa9f77e6e9f023dc59852153b8258661dd13b3e1a61fe9e8a5977aa74610415565b635a05180f60e01b6001600160e01b0319821614908115610ded575090565b61034291506123a6565b61032c90610e17600080516020612d538339815191526123e0565b6123e0565b610e4c565b906001600160a01b03905b9181191691161790565b90610e41610342610e48926105ee565b8254610e1c565b9055565b610e7c7f68c7b435e0ad7bfb2140fab0735300efbda206f62906049e0b35763cef67cc5e916108da816005610e31565b0390a1565b61032c90610df7565b905b600052602052604060002090565b6103429081565b6103429054610e9a565b6001610ec461034292610ebc600090565b506000610e8a565b01610ea1565b634e487b7160e01b600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff821117610f0257604052565b610eca565b9061032c610f1460405190565b9283610ee0565b67ffffffffffffffff8111610f0257602090601f01601f19160190565b0190565b90610f4e610f4983610f1b565b610f07565b918252565b610f5d6029610f3c565b7f353235317c50726f636573736f723a20726566756e6420746f2070726f63657360208201526873206973207a65726f60b81b604082015290565b610342610f53565b610342610f98565b60005b838110610fbb5750506000910152565b8181015183820152602001610fab565b610fec610ff5602093610f3893610fe0815190565b80835293849260200190565b95869101610fa8565b601f01601f191690565b602080825261034292910190610fcb565b156110185750565b61103a9061102560405190565b62461bcd60e51b815291829160048301610fff565b0390fd5b9060001990610e27565b90611058610342610e48926109fd565b825461103e565b6103429061037a565b610342905461105f565b61032c336110806007610ea1565b9061108a81612475565b6110a761109760006109fd565b83116110a1610fa0565b90611010565b6110bb6110b460006109fd565b6007611048565b6110c56003611068565b6110cf6005611068565b90612537565b9061032c979695949392916110e8612581565b61032c979695949392919061111c7f863747851594ece3a3681369cf3710069c605efc30fccffb517283afa5efce916123e0565b61130e565b6103429060081c61037a565b6103429054611121565b9050519061032c82610386565b9060208282031261031a5761034291611137565b50610342906020810190610ac2565b50610342906020810190610c2c565b50610342906020810190610c43565b9060206111b661032c936111ad61119f6000830183611167565b6001600160801b0319168552565b82810190611176565b61ffff16910152565b506103429060208101906103d9565b90606061122361032c936111ec6111e860008301836111bf565b8552565b6112036111fc60208301836111bf565b6020860152565b61121a61121360408301836111bf565b6040860152565b828101906111bf565b910152565b90606061125e61032c936112486112426000830183611158565b15158552565b611259602082016020860190611185565b820190565b9101906111ce565b90826000939282370152565b9190610ff58161128981610f389560209181520190565b8095611266565b9694906112f3946112dd89956112d36103429c9a966112c36112e59660006101808c019b01906001600160a01b03169052565b6001600160a01b031660208d0152565b60408b0190611228565b610120890152565b868303610140880152611272565b92610160818503910152611272565b6040513d6000823e3d90fd5b9485611354839960209795969960009461133061132b600261112d565b6105ee565b9761133a60405190565b9c8d9a8b998a98632e44b93960e01b8a5260048a01611290565b03925af19081156113f8577f49f84c15b9f052fd24e68e7760c0bc11d05c5a058721d4dfc2c5c02866f84cd6926000926113c3575b50611393906105ee565b926113be6113a060405190565b928392836001600160a01b0391821681529116602082015260400190565b0390a2565b6113939192506113ea9060203d6020116113f1575b6113e28183610ee0565b810190611144565b9190611389565b503d6113d8565b611302565b9061032c979695949392916110d5565b9061032c9161141e610e1282610eab565b906114289161259f565b50565b9061032c9161140d565b9061143f3361037a565b6001600160a01b0382160361145757611428916125ce565b60405163334bd91960e11b8152600490fd5b61032c906114967fca900a2e3cfbbbb78b9095304e53ddb6de902bbef4638bd3c79fe9cf3a4412026123e0565b6114a261132b826105ee565b90813b1561031a5760006114b560405190565b6337a1d41560e01b8152928390600490829084905af19182156113f8576114e192611512575b506105ee565b7feb17a79f3df37ac5b011bba24abb3d48db9d0dd39110551346f1c30bfa0fe70161150b60405190565b80806113be565b61152a9060006115228183610ee0565b810190610426565b386114db565b61032c90611469565b6115627f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a6123e0565b61032c61032c61265f565b61032c611539565b9061032c9291611583612581565b61032c9291906115b27f79af5a85184b45263c1b3721b9c8eb1becd98e55ade5a61da0fed18b90b832566123e0565b6115f9565b9050519061032c826103d3565b9060208282031261031a57610342916115b7565b6001600160a01b03909116815260408101929161032c9160200152565b0152565b602061163360009461160d61132b856105ee565b9061161760405190565b968793849283919063f93184c160e01b835289600484016115d8565b03925af19283156113f85760009361168c575b5061168761167d6116777f8c7f40acbbdddd09014432da06798dda241de8adb409a62f3611f9a0d63d6b5b936105ee565b936105ee565b9361041960405190565b0390a3565b7f8c7f40acbbdddd09014432da06798dda241de8adb409a62f3611f9a0d63d6b5b91935061167d6116776116da6116879360203d6020116116e4575b6116d28183610ee0565b8101906115c4565b9593505050611646565b503d6116c8565b9061032c9291611575565b61032c91906117247f581be84b4822abe392a3bcac0d4d656e4cd57faf2e321a32108215cdd4a836566123e0565b61173061132b826105ee565b803b1561031a57600061174260405190565b63b9603bdf60e01b815260048101859052918290602490829084905af180156113f8577fc8818db5b3e4e986e2f21e002090b1513e17c05a7a326c3737af624bf6ef78c4926113be926117999261151257506105ee565b9261041960405190565b9061032c916116f6565b61032c906117c8600080516020612d538339815191526123e0565b610e7c7fccbdeb71dc680b2f0fd85f93e7ef0f70eda32a12b918c9715be07bb646360e59916108da816004610e31565b61032c906117ad565b9061032c939291611810612581565b61032c939291906118407fd77cc12a543481a2b3ef8fd055979569715a10db9879cd9e664395eca3a54dff6123e0565b6118e2565b61184f601f610f3c565b7f353130317c436f6d6d6f6e3a20696e73756666696369656e742066756e647300602082015290565b610342611845565b610342611878565b611892602e610f3c565b7f353235327c50726f636573736f723a20726566756e6420746f2070726f63657360208201526d1cc81dd85cdb89dd081c995cd95d60921b604082015290565b610342611888565b6103426118d2565b6118eb846126aa565b61193860206118fd61132b6003611068565b6119076005611068565b9061191160405190565b938492839182916370a0823160e01b5b83526001600160a01b031660048301526024820190565b03915afa80156113f85761196491600091611a41575b50859061195a565b9190565b10156110a1611880565b61196f846007611048565b61197b61132b826105ee565b90813b1561031a57600061198e60405190565b92839063bc77d49560e01b82528183816119ac8a8a600484016115d8565b03925af19081156113f857611a16611a10611a1c927f6de2d5fa0b9cac9e48f300a350314e447648d158a5067a56513a46396f1b638a95611a2695611a2b575b5061132b6119fa6007610ea1565b611a0761195660006109fd565b146110a16118da565b946105ee565b946109fd565b9461041960405190565b0390a4565b611a3b9060006115228183610ee0565b386119ec565b611a5a915060203d6020116116e4576116d28183610ee0565b3861194e565b9061032c939291611801565b61032c9190611a9a7f7245419aa9f77e6e9f023dc59852153b8258661dd13b3e1a61fe9e8a5977aa746123e0565b611aa661132b826105ee565b803b1561031a576000611ab860405190565b6377627c0960e11b815260048101859052918290602490829084905af180156113f8577faeb30c8dda75512b9946228f4034031bd3f99d91f2c4ed3806be677f3429cd80926113be926117999261151257506105ee565b9061032c91611a6c565b61032c9190611b477f581be84b4822abe392a3bcac0d4d656e4cd57faf2e321a32108215cdd4a836566123e0565b611b5361132b826105ee565b803b1561031a576000611b6560405190565b6306b2a38360e41b815260048101859052918290602490829084905af180156113f8577fcc1685e553848099cad0e11271e780371c44b5ed92a54552fbedf9f1b6b9f247926113be926117999261151257506105ee565b9061032c91611b19565b611bef7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a6123e0565b61032c61032c612705565b61032c611bc6565b90611c1d61034261034293611c15600090565b506001610e8a565b612723565b90610e8c906105ee565b610342916000611c48611c4e93611c41600090565b5082610e8a565b01611c22565b5460ff1690565b610342907f350e76a198c654a14c1f5ccac917c5f939f08970b53375e57483f9623a24399c611c2c565b9061032c9291611c8d612581565b61032c929190611cbc7f6ac2c8b5322a929d300af17766189693ff6db6939ffe690430ad4720baf47d1c6123e0565b611cc861132b826105ee565b90813b1561031a576000611cdb60405190565b928390633e0fc2ff60e01b8252818381611cf98a8a600484016115d8565b03925af19182156113f8576116776116879261167d927f7ea7d3b21868f19f237e4e91d95cc953f5a73d5b2c1862712635f3ef384887fd9561151257506105ee565b9061032c9291611c7f565b9061032c939291611d55612581565b61032c93929190611d73600080516020612d738339815191526123e0565b611d9f565b6001600160a01b03909116815260608101939261032c9290916040916115f5906020830152565b611dab61132b826105ee565b90813b1561031a576000611dbe60405190565b9283906374b76f4760e11b8252818381611ddd8b8b8b60048501611d78565b03925af19081156113f857611a16611a10611a1c927f0ee23c67813e7ee061931ccc27dd2be79deb9f90738c9649947a27243cd6d81f95611a269561151257506105ee565b9061032c939291611d46565b9061032c94939291611e3e612581565b61032c9493929190611e5d600080516020612d738339815191526123e0565b611ea2565b611e9a61032c94611e93606094989795611e8c608086019a60008701906001600160a01b03169052565b6020850152565b6040830152565b019015159052565b9390919293611eb361132b826105ee565b803b1561031a57611eea600093918492611ecc60405190565b95869384928391906303ad5cef60e31b83528c8c8c60048601611e62565b03925af19081156113f857611a16611a10611a1c927f3cd37480027e3583365f7acfb552d017416b316c9bec58d3c722169ebcfbed8d95611a269561151257506105ee565b9061032c94939291611e2e565b9061032c9291611f4a612581565b61032c929190611f797f79af5a85184b45263c1b3721b9c8eb1becd98e55ade5a61da0fed18b90b832566123e0565b611f8561132b826105ee565b90813b1561031a576000611f9860405190565b636df6c7d560e11b815260048101869052928390602490829084905af19182156113f8576116776116879261167d927f4ec4ca1f307e20478f96cb1c545fe5430572a8db4931456f3828b649f641b1ef9561151257506105ee565b9061032c9291611f3c565b61201061034261034292611c15600090565b612757565b9061032c91612026610e1282610eab565b90611428916125ce565b9061032c91612015565b9061032c939291612049612581565b61032c939291906120797f6ac2c8b5322a929d300af17766189693ff6db6939ffe690430ad4720baf47d1c6123e0565b61208561132b826105ee565b90813b1561031a57600061209860405190565b928390634e6d8a7360e01b82528183816120b78b8b8b60048501611d78565b03925af19081156113f857611a16611a10611a1c927f1dd3b030dd7573079a398f70654588c91f23b82a2434fc5351cef1cbeda903e195611a269561151257506105ee565b9061032c93929161203a565b61032c90612123600080516020612d538339815191526123e0565b612186565b610342610e106109fd565b61213d6027610f3c565b7f353231317c50726f636573736f723a2073656375726974792064656c617920746020820152666f6f206c6f6e6760c81b604082015290565b610342612133565b610342612176565b610e7c7f7f63f876249f25f7856e620802edd09af38a83c9c6040fcdb371791540308311916121c36121b9610342612128565b82106110a161217e565b610415816006611048565b61032c90612108565b9061032c9695949392916121e9612581565b61032c9695949392919061220a600080516020612d738339815191526123e0565b61226c565b9194612261611e9a9298979561225060a09661224961032c9a61224260c08a019e60008b01906001600160a01b03169052565b6020890152565b6040870152565b6001600160801b0319166060850152565b61ffff166080830152565b9194959093929561227f61132b846105ee565b803b1561031a5786600087611eea82968c9661229a60405190565b9a8b9889978896636fb7e9c160e01b88526004880161220f565b9061032c9695949392916121d7565b9061032c9695949392916122d5612581565b61032c969594939291906122f6600080516020612d738339815191526123e0565b61234f565b9695939461032c956123396080956123326123469661232b8d97600060a08a019901906001600160a01b03169052565b60208d0152565b60408b0152565b88830360608a0152611272565b94019015159052565b9194959093929561236261132b846105ee565b803b1561031a5786600087611eea82968c9661237d60405190565b9a8b98899788966311de011760e31b8852600488016122fb565b9061032c9695949392916122c3565b637965db0b60e01b6001600160e01b03198216149081156123c5575090565b61034291506001600160e01b0319166301ffc9a760e01b1490565b61032c90339061276d565b9050519061032c82610aba565b9060208282031261031a57610342916123eb565b6124166037610f3c565b7f353230307c50726f636573736f723a207061796d656e74206163636f756e742060208201527f6e6f74206465706c6f79656420627920666163746f7279000000000000000000604082015290565b61034261240c565b610342612465565b602061249f9161248861132b600261112d565b604051938492839182916385bb392360e01b611921565b03915afa80156113f85761032c916000916124be575b506110a161246d565b6124e0915060203d6020116124e6575b6124d88183610ee0565b8101906123f8565b386124b5565b503d6124ce565b6125066125006103429263ffffffff1690565b60e01b90565b6001600160e01b03191690565b6001600160a01b0391821681529116602082015260608101929161032c9160400152565b9061257c9061256d61032c956004956125536323b872dd6124ed565b9361255d60405190565b9788956020870190815201612513565b60208201810382520383610ee0565b6127a9565b60025460ff1661258d57565b60405163d93c066560e01b8152600490fd5b6125a98282612831565b91826125b457505090565b6125c56103426125ca936001610e8a565b6128be565b5090565b6125d882826128f0565b91826125e357505090565b6125f46103426125ca936001610e8a565b61294c565b61260161296c565b61032c612629565b9060ff90610e27565b90612622610342610e4892151590565b8254612609565b61263560006002612612565b7f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa610e7c336108da565b61032c6125f9565b612671601b610f3c565b7f353130307c436f6d6d6f6e3a20616d6f756e74206973207a65726f0000000000602082015290565b610342612667565b61034261269a565b61032c906126bb61195660006109fd565b116110a16126a2565b6126cc612581565b61032c6126db60016002612612565b7f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610e7c336108da565b61032c6126c4565b610342906109fd565b61037a6103426103429290565b61274d6127486103429361274360006127529561273e600090565b500190565b6129d1565b61270d565b612716565b6105e5565b61276860006103429261273e600090565b6129f0565b9061277f61277b8284611c2c565b1590565b612787575050565b61103a61279360405190565b63e2517d3f60e01b8152928392600484016115d8565b6127b56127bc916105ee565b9182612a04565b80516127cb61195660006109fd565b1415908161280d575b506127dc5750565b61103a906127e960405190565b635274afe760e01b8152918291600483016001600160a01b03909116815260200190565b61282b915080602061282061277b935190565b8183010191016123f8565b386127d4565b61283e61277b8383611c2c565b156128a55761285d6001612858846000611c488682610e8a565b612612565b61287161286b611677339390565b916105ee565b917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d61289c60405190565b600090a4600190565b5050600090565b6103429081906001600160a01b031681565b906128eb6119566128e66128e16000610342966128d9600090565b5001946105e5565b6128ac565b6109fd565b612a71565b6128fa8282611c2c565b156128a55761291360006128588482611c488682610e8a565b61292161286b611677339390565b917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b61289c60405190565b906129676119566128e66128e16000610342966128d9600090565b612b3f565b61297b61277b60025460ff1690565b61298157565b604051638dfc202b60e01b8152600490fd5b634e487b7160e01b600052603260045260246000fd5b80548210156129cc576129c3600191600052602060002090565b91020190600090565b612993565b6103429160006129ea926129e3600090565b50016129a9565b90610b9d565b6000610342916129fe600090565b50015490565b61034291612a1260006109fd565b91612c23565b9160001960089290920291821b911b610e27565b9190612a3b610342610e489390565b908354612a18565b9081549168010000000000000000831015610f025782612a6b91600161032c950181556129a9565b90612a2c565b612a7e61277b8383612c88565b156128a557612aab91612aa6906001612a9f84612a9b8482612a43565b5490565b9301610e8a565b611048565b600190565b634e487b7160e01b600052601160045260246000fd5b91908203918211612ad357565b612ab0565b634e487b7160e01b600052603160045260246000fd5b61032c91600091612a2c565b80548015612b1d576000190190612b1a612b1483836129a9565b90612aee565b55565b612ad8565b9190612a3b610342610e48936109fd565b61032c91600091612b22565b90612b55612b508260018501610e8a565b610ea1565b612b5f60006109fd565b8114612bfc57612bc461034292600092612bb995612bbe6001978893612b8d612b87866109fd565b82612ac6565b88850191612bab612b9c845490565b612ba5896109fd565b90612ac6565b808303612bc9575b50505090565b612afa565b01610e8a565b612b33565b612a6b612bec612bf494612be36129ea612aa695896129a9565b928391886129a9565b888801610e8a565b388080612bb3565b505050600090565b3d15612c1e57612c133d610f3c565b903d6000602084013e565b606090565b91612c2d306105ee565b81813110612c57575060008281926020610342969551920190855af1612c51612c04565b91612cb3565b61103a90612c6460405190565b63cd78605960e01b8152918291600483016001600160a01b03909116815260200190565b612ca1916001612b5092612c9a600090565b5001610e8a565b612cae61195660006109fd565b141590565b90612cbe5750612d23565b8151612ccd61195660006109fd565b1480612d0d575b612cdc575090565b61103a90612ce960405190565b639996b31560e01b8152918291600483016001600160a01b03909116815260200190565b50803b612d1d61195660006109fd565b14612cd4565b8051612d3261195660006109fd565b1115612d4057805190602001fd5b604051630a12f52160e11b8152600490fdfefa658e47c75a6eb0e27156b2f72e1b295c98b53e8a1d238d7ca6ea6345b34880a567244cad934c87b7f7e15b15dd0e75f95a76afd1916f8eab4a391410d6f278a26469706673582212202e2530549c24438ec28dea3d0ac5bc4a94ae7752c7cb46a83d147d6cd4df5ffd64736f6c63430008160033";

    private static String librariesLinkedBinary;

    public static final String FUNC_AUTHORIZATION_PROCESSOR_ROLE = "AUTHORIZATION_PROCESSOR_ROLE";

    public static final String FUNC_BALANCE_VERIFIER_ROLE = "BALANCE_VERIFIER_ROLE";

    public static final String FUNC_CARD_CONFIRMER_ROLE = "CARD_CONFIRMER_ROLE";

    public static final String FUNC_DEBT_PROCESSOR_ROLE = "DEBT_PROCESSOR_ROLE";

    public static final String FUNC_DEFAULT_ADMIN_ROLE = "DEFAULT_ADMIN_ROLE";

    public static final String FUNC_PAUSER_ROLE = "PAUSER_ROLE";

    public static final String FUNC_PAYMENT_ACCOUNT_DEPLOYER_ROLE = "PAYMENT_ACCOUNT_DEPLOYER_ROLE";

    public static final String FUNC_PAYMENT_ACCOUNT_PROPERTY_SETTER_ROLE = "PAYMENT_ACCOUNT_PROPERTY_SETTER_ROLE";

    public static final String FUNC_PROPERTY_SETTER_ROLE = "PROPERTY_SETTER_ROLE";

    public static final String FUNC_REFUND_PROCESSOR_ROLE = "REFUND_PROCESSOR_ROLE";

    public static final String FUNC_SETTLEMENT_PROCESSOR_ROLE = "SETTLEMENT_PROCESSOR_ROLE";

    public static final String FUNC_WITHDRAWAL_PROCESSOR_ROLE = "WITHDRAWAL_PROCESSOR_ROLE";

    public static final String FUNC_DEPLOYPAYMENTACCOUNT = "deployPaymentAccount";

    public static final String FUNC_GETROLEADMIN = "getRoleAdmin";

    public static final String FUNC_GETROLEMEMBER = "getRoleMember";

    public static final String FUNC_GETROLEMEMBERCOUNT = "getRoleMemberCount";

    public static final String FUNC_GRANTROLE = "grantRole";

    public static final String FUNC_HASROLE = "hasRole";

    public static final String FUNC_INCREASEVERIFIEDBALANCEFOR = "increaseVerifiedBalanceFor";

    public static final String FUNC_ISCARDCONFIRMER = "isCardConfirmer";

    public static final String FUNC_PAUSE = "pause";

    public static final String FUNC_PAUSED = "paused";

    public static final String FUNC_PAYMENTACCOUNTFACTORY = "paymentAccountFactory";

    public static final String FUNC_PAYMENTRECEIVER = "paymentReceiver";

    public static final String FUNC_PAYMENTTOKEN = "paymentToken";

    public static final String FUNC_PROCESSAUTHORIZATIONCHANGE = "processAuthorizationChange";

    public static final String FUNC_PROCESSDEBT = "processDebt";

    public static final String FUNC_PROCESSNOCONFIRMATIONAUTHORIZATION = "processNoConfirmationAuthorization";

    public static final String FUNC_PROCESSOTPAUTHORIZATION = "processOtpAuthorization";

    public static final String FUNC_PROCESSREFUND = "processRefund";

    public static final String FUNC_PROCESSREFUNDCALLBACK = "processRefundCallback";

    public static final String FUNC_PROCESSSETTLEMENT = "processSettlement";

    public static final String FUNC_PROCESSSIGNATUREAUTHORIZATION = "processSignatureAuthorization";

    public static final String FUNC_PROCESSUNSETTLEDTRANSACTION = "processUnsettledTransaction";

    public static final String FUNC_PROCESSWITHDRAWAL = "processWithdrawal";

    public static final String FUNC_REFUNDACCOUNT = "refundAccount";

    public static final String FUNC_RENOUNCEROLE = "renounceRole";

    public static final String FUNC_REVOKEROLE = "revokeRole";

    public static final String FUNC_SECURITYDELAY = "securityDelay";

    public static final String FUNC_SETAUTHLIMITMARGINFOR = "setAuthLimitMarginFor";

    public static final String FUNC_SETPAYMENTRECEIVER = "setPaymentReceiver";

    public static final String FUNC_SETREFUNDACCOUNT = "setRefundAccount";

    public static final String FUNC_SETSECURITYDELAY = "setSecurityDelay";

    public static final String FUNC_SETVERIFIEDBALANCEFOR = "setVerifiedBalanceFor";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_UNPAUSE = "unpause";

    public static final String FUNC_WRITEOFFDEBT = "writeOffDebt";

    public static final Event AUTHLIMITMARGINSETFOR_EVENT = new Event("AuthLimitMarginSetFor",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event AUTHORIZATIONCHANGEPROCESSED_EVENT = new Event("AuthorizationChangeProcessed",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event AUTHORIZATIONPROCESSED_EVENT = new Event("AuthorizationProcessed",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DEBTPROCESSED_EVENT = new Event("DebtProcessed",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DEBTWRITEOFFPROCESSED_EVENT = new Event("DebtWriteOffProcessed",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event PAUSED_EVENT = new Event("Paused",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event PAYMENTACCOUNTDEPLOYED_EVENT = new Event("PaymentAccountDeployed",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event PAYMENTRECEIVERSET_EVENT = new Event("PaymentReceiverSet",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event REFUNDACCOUNTSET_EVENT = new Event("RefundAccountSet",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event REFUNDPROCESSED_EVENT = new Event("RefundProcessed",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ROLEADMINCHANGED_EVENT = new Event("RoleAdminChanged",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event ROLEGRANTED_EVENT = new Event("RoleGranted",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event ROLEREVOKED_EVENT = new Event("RoleRevoked",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event SECURITYDELAYSET_EVENT = new Event("SecurityDelaySet",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event SETTLEMENTPERIODSET_EVENT = new Event("SettlementPeriodSet",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event SETTLEMENTPROCESSED_EVENT = new Event("SettlementProcessed",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event UNPAUSED_EVENT = new Event("Unpaused",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event UNSETTLEDTRANSACTIONPROCESSED_EVENT = new Event("UnsettledTransactionProcessed",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event VERIFIEDBALANCEINCREASEDFOR_EVENT = new Event("VerifiedBalanceIncreasedFor",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event VERIFIEDBALANCESETFOR_EVENT = new Event("VerifiedBalanceSetFor",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event WITHDRAWALPROCESSED_EVENT = new Event("WithdrawalProcessed",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    @Deprecated
    protected TangemBridgeProcessor(String contractAddress, Web3j web3j, Credentials credentials,
                                    BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected TangemBridgeProcessor(String contractAddress, Web3j web3j, Credentials credentials,
                                    ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected TangemBridgeProcessor(String contractAddress, Web3j web3j,
                                    TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected TangemBridgeProcessor(String contractAddress, Web3j web3j,
                                    TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<AuthLimitMarginSetForEventResponse> getAuthLimitMarginSetForEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(AUTHLIMITMARGINSETFOR_EVENT, transactionReceipt);
        ArrayList<AuthLimitMarginSetForEventResponse> responses = new ArrayList<AuthLimitMarginSetForEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AuthLimitMarginSetForEventResponse typedResponse = new AuthLimitMarginSetForEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.paymentAccount = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.authLimitMargin = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static AuthLimitMarginSetForEventResponse getAuthLimitMarginSetForEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(AUTHLIMITMARGINSETFOR_EVENT, log);
        AuthLimitMarginSetForEventResponse typedResponse = new AuthLimitMarginSetForEventResponse();
        typedResponse.log = log;
        typedResponse.paymentAccount = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.authLimitMargin = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<AuthLimitMarginSetForEventResponse> authLimitMarginSetForEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAuthLimitMarginSetForEventFromLog(log));
    }

    public Flowable<AuthLimitMarginSetForEventResponse> authLimitMarginSetForEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(AUTHLIMITMARGINSETFOR_EVENT));
        return authLimitMarginSetForEventFlowable(filter);
    }

    public static List<AuthorizationChangeProcessedEventResponse> getAuthorizationChangeProcessedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(AUTHORIZATIONCHANGEPROCESSED_EVENT, transactionReceipt);
        ArrayList<AuthorizationChangeProcessedEventResponse> responses = new ArrayList<AuthorizationChangeProcessedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AuthorizationChangeProcessedEventResponse typedResponse = new AuthorizationChangeProcessedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.paymentAccount = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.card = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.transactionId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static AuthorizationChangeProcessedEventResponse getAuthorizationChangeProcessedEventFromLog(
            Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(AUTHORIZATIONCHANGEPROCESSED_EVENT, log);
        AuthorizationChangeProcessedEventResponse typedResponse = new AuthorizationChangeProcessedEventResponse();
        typedResponse.log = log;
        typedResponse.paymentAccount = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.card = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.transactionId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<AuthorizationChangeProcessedEventResponse> authorizationChangeProcessedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAuthorizationChangeProcessedEventFromLog(log));
    }

    public Flowable<AuthorizationChangeProcessedEventResponse> authorizationChangeProcessedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(AUTHORIZATIONCHANGEPROCESSED_EVENT));
        return authorizationChangeProcessedEventFlowable(filter);
    }

    public static List<AuthorizationProcessedEventResponse> getAuthorizationProcessedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(AUTHORIZATIONPROCESSED_EVENT, transactionReceipt);
        ArrayList<AuthorizationProcessedEventResponse> responses = new ArrayList<AuthorizationProcessedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AuthorizationProcessedEventResponse typedResponse = new AuthorizationProcessedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.paymentAccount = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.card = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.transactionId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static AuthorizationProcessedEventResponse getAuthorizationProcessedEventFromLog(
            Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(AUTHORIZATIONPROCESSED_EVENT, log);
        AuthorizationProcessedEventResponse typedResponse = new AuthorizationProcessedEventResponse();
        typedResponse.log = log;
        typedResponse.paymentAccount = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.card = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.transactionId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<AuthorizationProcessedEventResponse> authorizationProcessedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAuthorizationProcessedEventFromLog(log));
    }

    public Flowable<AuthorizationProcessedEventResponse> authorizationProcessedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(AUTHORIZATIONPROCESSED_EVENT));
        return authorizationProcessedEventFlowable(filter);
    }

    public static List<DebtProcessedEventResponse> getDebtProcessedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(DEBTPROCESSED_EVENT, transactionReceipt);
        ArrayList<DebtProcessedEventResponse> responses = new ArrayList<DebtProcessedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DebtProcessedEventResponse typedResponse = new DebtProcessedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.paymentAccount = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.card = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static DebtProcessedEventResponse getDebtProcessedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(DEBTPROCESSED_EVENT, log);
        DebtProcessedEventResponse typedResponse = new DebtProcessedEventResponse();
        typedResponse.log = log;
        typedResponse.paymentAccount = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.card = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<DebtProcessedEventResponse> debtProcessedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getDebtProcessedEventFromLog(log));
    }

    public Flowable<DebtProcessedEventResponse> debtProcessedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEBTPROCESSED_EVENT));
        return debtProcessedEventFlowable(filter);
    }

    public static List<DebtWriteOffProcessedEventResponse> getDebtWriteOffProcessedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(DEBTWRITEOFFPROCESSED_EVENT, transactionReceipt);
        ArrayList<DebtWriteOffProcessedEventResponse> responses = new ArrayList<DebtWriteOffProcessedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DebtWriteOffProcessedEventResponse typedResponse = new DebtWriteOffProcessedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.paymentAccount = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.card = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static DebtWriteOffProcessedEventResponse getDebtWriteOffProcessedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(DEBTWRITEOFFPROCESSED_EVENT, log);
        DebtWriteOffProcessedEventResponse typedResponse = new DebtWriteOffProcessedEventResponse();
        typedResponse.log = log;
        typedResponse.paymentAccount = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.card = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<DebtWriteOffProcessedEventResponse> debtWriteOffProcessedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getDebtWriteOffProcessedEventFromLog(log));
    }

    public Flowable<DebtWriteOffProcessedEventResponse> debtWriteOffProcessedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEBTWRITEOFFPROCESSED_EVENT));
        return debtWriteOffProcessedEventFlowable(filter);
    }

    public static List<PausedEventResponse> getPausedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PAUSED_EVENT, transactionReceipt);
        ArrayList<PausedEventResponse> responses = new ArrayList<PausedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PausedEventResponse typedResponse = new PausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static PausedEventResponse getPausedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(PAUSED_EVENT, log);
        PausedEventResponse typedResponse = new PausedEventResponse();
        typedResponse.log = log;
        typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getPausedEventFromLog(log));
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(DefaultBlockParameter startBlock,
                                                             DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAUSED_EVENT));
        return pausedEventFlowable(filter);
    }

    public static List<PaymentAccountDeployedEventResponse> getPaymentAccountDeployedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PAYMENTACCOUNTDEPLOYED_EVENT, transactionReceipt);
        ArrayList<PaymentAccountDeployedEventResponse> responses = new ArrayList<PaymentAccountDeployedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PaymentAccountDeployedEventResponse typedResponse = new PaymentAccountDeployedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.cardAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.paymentAccount = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static PaymentAccountDeployedEventResponse getPaymentAccountDeployedEventFromLog(
            Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(PAYMENTACCOUNTDEPLOYED_EVENT, log);
        PaymentAccountDeployedEventResponse typedResponse = new PaymentAccountDeployedEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.cardAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.paymentAccount = (String) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<PaymentAccountDeployedEventResponse> paymentAccountDeployedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getPaymentAccountDeployedEventFromLog(log));
    }

    public Flowable<PaymentAccountDeployedEventResponse> paymentAccountDeployedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAYMENTACCOUNTDEPLOYED_EVENT));
        return paymentAccountDeployedEventFlowable(filter);
    }

    public static List<PaymentReceiverSetEventResponse> getPaymentReceiverSetEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PAYMENTRECEIVERSET_EVENT, transactionReceipt);
        ArrayList<PaymentReceiverSetEventResponse> responses = new ArrayList<PaymentReceiverSetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PaymentReceiverSetEventResponse typedResponse = new PaymentReceiverSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.paymentReceiver = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static PaymentReceiverSetEventResponse getPaymentReceiverSetEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(PAYMENTRECEIVERSET_EVENT, log);
        PaymentReceiverSetEventResponse typedResponse = new PaymentReceiverSetEventResponse();
        typedResponse.log = log;
        typedResponse.paymentReceiver = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<PaymentReceiverSetEventResponse> paymentReceiverSetEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getPaymentReceiverSetEventFromLog(log));
    }

    public Flowable<PaymentReceiverSetEventResponse> paymentReceiverSetEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAYMENTRECEIVERSET_EVENT));
        return paymentReceiverSetEventFlowable(filter);
    }

    public static List<RefundAccountSetEventResponse> getRefundAccountSetEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(REFUNDACCOUNTSET_EVENT, transactionReceipt);
        ArrayList<RefundAccountSetEventResponse> responses = new ArrayList<RefundAccountSetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RefundAccountSetEventResponse typedResponse = new RefundAccountSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.refundAccount = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RefundAccountSetEventResponse getRefundAccountSetEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(REFUNDACCOUNTSET_EVENT, log);
        RefundAccountSetEventResponse typedResponse = new RefundAccountSetEventResponse();
        typedResponse.log = log;
        typedResponse.refundAccount = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<RefundAccountSetEventResponse> refundAccountSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRefundAccountSetEventFromLog(log));
    }

    public Flowable<RefundAccountSetEventResponse> refundAccountSetEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REFUNDACCOUNTSET_EVENT));
        return refundAccountSetEventFlowable(filter);
    }

    public static List<RefundProcessedEventResponse> getRefundProcessedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(REFUNDPROCESSED_EVENT, transactionReceipt);
        ArrayList<RefundProcessedEventResponse> responses = new ArrayList<RefundProcessedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RefundProcessedEventResponse typedResponse = new RefundProcessedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.paymentAccount = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.card = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.transactionId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RefundProcessedEventResponse getRefundProcessedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(REFUNDPROCESSED_EVENT, log);
        RefundProcessedEventResponse typedResponse = new RefundProcessedEventResponse();
        typedResponse.log = log;
        typedResponse.paymentAccount = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.card = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.transactionId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<RefundProcessedEventResponse> refundProcessedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRefundProcessedEventFromLog(log));
    }

    public Flowable<RefundProcessedEventResponse> refundProcessedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REFUNDPROCESSED_EVENT));
        return refundProcessedEventFlowable(filter);
    }

    public static List<RoleAdminChangedEventResponse> getRoleAdminChangedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ROLEADMINCHANGED_EVENT, transactionReceipt);
        ArrayList<RoleAdminChangedEventResponse> responses = new ArrayList<RoleAdminChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.previousAdminRole = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.newAdminRole = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RoleAdminChangedEventResponse getRoleAdminChangedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ROLEADMINCHANGED_EVENT, log);
        RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
        typedResponse.log = log;
        typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.previousAdminRole = (byte[]) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.newAdminRole = (byte[]) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<RoleAdminChangedEventResponse> roleAdminChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRoleAdminChangedEventFromLog(log));
    }

    public Flowable<RoleAdminChangedEventResponse> roleAdminChangedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEADMINCHANGED_EVENT));
        return roleAdminChangedEventFlowable(filter);
    }

    public static List<RoleGrantedEventResponse> getRoleGrantedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ROLEGRANTED_EVENT, transactionReceipt);
        ArrayList<RoleGrantedEventResponse> responses = new ArrayList<RoleGrantedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RoleGrantedEventResponse getRoleGrantedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ROLEGRANTED_EVENT, log);
        RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
        typedResponse.log = log;
        typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<RoleGrantedEventResponse> roleGrantedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRoleGrantedEventFromLog(log));
    }

    public Flowable<RoleGrantedEventResponse> roleGrantedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEGRANTED_EVENT));
        return roleGrantedEventFlowable(filter);
    }

    public static List<RoleRevokedEventResponse> getRoleRevokedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ROLEREVOKED_EVENT, transactionReceipt);
        ArrayList<RoleRevokedEventResponse> responses = new ArrayList<RoleRevokedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RoleRevokedEventResponse getRoleRevokedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ROLEREVOKED_EVENT, log);
        RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
        typedResponse.log = log;
        typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<RoleRevokedEventResponse> roleRevokedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRoleRevokedEventFromLog(log));
    }

    public Flowable<RoleRevokedEventResponse> roleRevokedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEREVOKED_EVENT));
        return roleRevokedEventFlowable(filter);
    }

    public static List<SecurityDelaySetEventResponse> getSecurityDelaySetEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(SECURITYDELAYSET_EVENT, transactionReceipt);
        ArrayList<SecurityDelaySetEventResponse> responses = new ArrayList<SecurityDelaySetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SecurityDelaySetEventResponse typedResponse = new SecurityDelaySetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.securityDelay = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static SecurityDelaySetEventResponse getSecurityDelaySetEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(SECURITYDELAYSET_EVENT, log);
        SecurityDelaySetEventResponse typedResponse = new SecurityDelaySetEventResponse();
        typedResponse.log = log;
        typedResponse.securityDelay = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<SecurityDelaySetEventResponse> securityDelaySetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getSecurityDelaySetEventFromLog(log));
    }

    public Flowable<SecurityDelaySetEventResponse> securityDelaySetEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SECURITYDELAYSET_EVENT));
        return securityDelaySetEventFlowable(filter);
    }

    public static List<SettlementPeriodSetEventResponse> getSettlementPeriodSetEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(SETTLEMENTPERIODSET_EVENT, transactionReceipt);
        ArrayList<SettlementPeriodSetEventResponse> responses = new ArrayList<SettlementPeriodSetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SettlementPeriodSetEventResponse typedResponse = new SettlementPeriodSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.settlementPeriod = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static SettlementPeriodSetEventResponse getSettlementPeriodSetEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(SETTLEMENTPERIODSET_EVENT, log);
        SettlementPeriodSetEventResponse typedResponse = new SettlementPeriodSetEventResponse();
        typedResponse.log = log;
        typedResponse.settlementPeriod = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<SettlementPeriodSetEventResponse> settlementPeriodSetEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getSettlementPeriodSetEventFromLog(log));
    }

    public Flowable<SettlementPeriodSetEventResponse> settlementPeriodSetEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETTLEMENTPERIODSET_EVENT));
        return settlementPeriodSetEventFlowable(filter);
    }

    public static List<SettlementProcessedEventResponse> getSettlementProcessedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(SETTLEMENTPROCESSED_EVENT, transactionReceipt);
        ArrayList<SettlementProcessedEventResponse> responses = new ArrayList<SettlementProcessedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SettlementProcessedEventResponse typedResponse = new SettlementProcessedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.paymentAccount = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.card = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.transactionId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static SettlementProcessedEventResponse getSettlementProcessedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(SETTLEMENTPROCESSED_EVENT, log);
        SettlementProcessedEventResponse typedResponse = new SettlementProcessedEventResponse();
        typedResponse.log = log;
        typedResponse.paymentAccount = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.card = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.transactionId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<SettlementProcessedEventResponse> settlementProcessedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getSettlementProcessedEventFromLog(log));
    }

    public Flowable<SettlementProcessedEventResponse> settlementProcessedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETTLEMENTPROCESSED_EVENT));
        return settlementProcessedEventFlowable(filter);
    }

    public static List<UnpausedEventResponse> getUnpausedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(UNPAUSED_EVENT, transactionReceipt);
        ArrayList<UnpausedEventResponse> responses = new ArrayList<UnpausedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnpausedEventResponse typedResponse = new UnpausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static UnpausedEventResponse getUnpausedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(UNPAUSED_EVENT, log);
        UnpausedEventResponse typedResponse = new UnpausedEventResponse();
        typedResponse.log = log;
        typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getUnpausedEventFromLog(log));
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(DefaultBlockParameter startBlock,
                                                                 DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UNPAUSED_EVENT));
        return unpausedEventFlowable(filter);
    }

    public static List<UnsettledTransactionProcessedEventResponse> getUnsettledTransactionProcessedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(UNSETTLEDTRANSACTIONPROCESSED_EVENT, transactionReceipt);
        ArrayList<UnsettledTransactionProcessedEventResponse> responses = new ArrayList<UnsettledTransactionProcessedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnsettledTransactionProcessedEventResponse typedResponse = new UnsettledTransactionProcessedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.paymentAccount = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.card = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.transactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static UnsettledTransactionProcessedEventResponse getUnsettledTransactionProcessedEventFromLog(
            Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(UNSETTLEDTRANSACTIONPROCESSED_EVENT, log);
        UnsettledTransactionProcessedEventResponse typedResponse = new UnsettledTransactionProcessedEventResponse();
        typedResponse.log = log;
        typedResponse.paymentAccount = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.card = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.transactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<UnsettledTransactionProcessedEventResponse> unsettledTransactionProcessedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getUnsettledTransactionProcessedEventFromLog(log));
    }

    public Flowable<UnsettledTransactionProcessedEventResponse> unsettledTransactionProcessedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UNSETTLEDTRANSACTIONPROCESSED_EVENT));
        return unsettledTransactionProcessedEventFlowable(filter);
    }

    public static List<VerifiedBalanceIncreasedForEventResponse> getVerifiedBalanceIncreasedForEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(VERIFIEDBALANCEINCREASEDFOR_EVENT, transactionReceipt);
        ArrayList<VerifiedBalanceIncreasedForEventResponse> responses = new ArrayList<VerifiedBalanceIncreasedForEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VerifiedBalanceIncreasedForEventResponse typedResponse = new VerifiedBalanceIncreasedForEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.paymentAccount = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.increase = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static VerifiedBalanceIncreasedForEventResponse getVerifiedBalanceIncreasedForEventFromLog(
            Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(VERIFIEDBALANCEINCREASEDFOR_EVENT, log);
        VerifiedBalanceIncreasedForEventResponse typedResponse = new VerifiedBalanceIncreasedForEventResponse();
        typedResponse.log = log;
        typedResponse.paymentAccount = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.increase = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<VerifiedBalanceIncreasedForEventResponse> verifiedBalanceIncreasedForEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getVerifiedBalanceIncreasedForEventFromLog(log));
    }

    public Flowable<VerifiedBalanceIncreasedForEventResponse> verifiedBalanceIncreasedForEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VERIFIEDBALANCEINCREASEDFOR_EVENT));
        return verifiedBalanceIncreasedForEventFlowable(filter);
    }

    public static List<VerifiedBalanceSetForEventResponse> getVerifiedBalanceSetForEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(VERIFIEDBALANCESETFOR_EVENT, transactionReceipt);
        ArrayList<VerifiedBalanceSetForEventResponse> responses = new ArrayList<VerifiedBalanceSetForEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VerifiedBalanceSetForEventResponse typedResponse = new VerifiedBalanceSetForEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.paymentAccount = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.verifiedBalance = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static VerifiedBalanceSetForEventResponse getVerifiedBalanceSetForEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(VERIFIEDBALANCESETFOR_EVENT, log);
        VerifiedBalanceSetForEventResponse typedResponse = new VerifiedBalanceSetForEventResponse();
        typedResponse.log = log;
        typedResponse.paymentAccount = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.verifiedBalance = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<VerifiedBalanceSetForEventResponse> verifiedBalanceSetForEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getVerifiedBalanceSetForEventFromLog(log));
    }

    public Flowable<VerifiedBalanceSetForEventResponse> verifiedBalanceSetForEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VERIFIEDBALANCESETFOR_EVENT));
        return verifiedBalanceSetForEventFlowable(filter);
    }

    public static List<WithdrawalProcessedEventResponse> getWithdrawalProcessedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(WITHDRAWALPROCESSED_EVENT, transactionReceipt);
        ArrayList<WithdrawalProcessedEventResponse> responses = new ArrayList<WithdrawalProcessedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WithdrawalProcessedEventResponse typedResponse = new WithdrawalProcessedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.paymentAccount = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static WithdrawalProcessedEventResponse getWithdrawalProcessedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(WITHDRAWALPROCESSED_EVENT, log);
        WithdrawalProcessedEventResponse typedResponse = new WithdrawalProcessedEventResponse();
        typedResponse.log = log;
        typedResponse.paymentAccount = (String) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<WithdrawalProcessedEventResponse> withdrawalProcessedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getWithdrawalProcessedEventFromLog(log));
    }

    public Flowable<WithdrawalProcessedEventResponse> withdrawalProcessedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAWALPROCESSED_EVENT));
        return withdrawalProcessedEventFlowable(filter);
    }

    public RemoteFunctionCall<byte[]> AUTHORIZATION_PROCESSOR_ROLE() {
        final Function function = new Function(FUNC_AUTHORIZATION_PROCESSOR_ROLE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> BALANCE_VERIFIER_ROLE() {
        final Function function = new Function(FUNC_BALANCE_VERIFIER_ROLE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> CARD_CONFIRMER_ROLE() {
        final Function function = new Function(FUNC_CARD_CONFIRMER_ROLE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> DEBT_PROCESSOR_ROLE() {
        final Function function = new Function(FUNC_DEBT_PROCESSOR_ROLE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> DEFAULT_ADMIN_ROLE() {
        final Function function = new Function(FUNC_DEFAULT_ADMIN_ROLE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> PAUSER_ROLE() {
        final Function function = new Function(FUNC_PAUSER_ROLE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> PAYMENT_ACCOUNT_DEPLOYER_ROLE() {
        final Function function = new Function(FUNC_PAYMENT_ACCOUNT_DEPLOYER_ROLE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> PAYMENT_ACCOUNT_PROPERTY_SETTER_ROLE() {
        final Function function = new Function(FUNC_PAYMENT_ACCOUNT_PROPERTY_SETTER_ROLE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> PROPERTY_SETTER_ROLE() {
        final Function function = new Function(FUNC_PROPERTY_SETTER_ROLE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> REFUND_PROCESSOR_ROLE() {
        final Function function = new Function(FUNC_REFUND_PROCESSOR_ROLE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> SETTLEMENT_PROCESSOR_ROLE() {
        final Function function = new Function(FUNC_SETTLEMENT_PROCESSOR_ROLE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> WITHDRAWAL_PROCESSOR_ROLE() {
        final Function function = new Function(FUNC_WITHDRAWAL_PROCESSOR_ROLE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> deployPaymentAccount(String owner,
                                                                       String cardAddress, CardParams cardParams, BigInteger authLimitMargin_,
                                                                       byte[] ownerDeployAcceptanceSignature, byte[] cardDeployAcceptanceSignature) {
        final Function function = new Function(
                FUNC_DEPLOYPAYMENTACCOUNT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner),
                        new org.web3j.abi.datatypes.Address(160, cardAddress),
                        cardParams,
                        new org.web3j.abi.datatypes.generated.Uint256(authLimitMargin_),
                        new org.web3j.abi.datatypes.DynamicBytes(ownerDeployAcceptanceSignature),
                        new org.web3j.abi.datatypes.DynamicBytes(cardDeployAcceptanceSignature)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<byte[]> getRoleAdmin(byte[] role) {
        final Function function = new Function(FUNC_GETROLEADMIN,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<String> getRoleMember(byte[] role, BigInteger index) {
        final Function function = new Function(FUNC_GETROLEMEMBER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role),
                        new org.web3j.abi.datatypes.generated.Uint256(index)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> getRoleMemberCount(byte[] role) {
        final Function function = new Function(FUNC_GETROLEMEMBERCOUNT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> grantRole(byte[] role, String account) {
        final Function function = new Function(
                FUNC_GRANTROLE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role),
                        new org.web3j.abi.datatypes.Address(160, account)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> hasRole(byte[] role, String account) {
        final Function function = new Function(FUNC_HASROLE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role),
                        new org.web3j.abi.datatypes.Address(160, account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> increaseVerifiedBalanceFor(String paymentAccount,
                                                                             BigInteger increase) {
        final Function function = new Function(
                FUNC_INCREASEVERIFIEDBALANCEFOR,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, paymentAccount),
                        new org.web3j.abi.datatypes.generated.Uint256(increase)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> isCardConfirmer(String account) {
        final Function function = new Function(FUNC_ISCARDCONFIRMER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> pause() {
        final Function function = new Function(
                FUNC_PAUSE,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> paused() {
        final Function function = new Function(FUNC_PAUSED,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> paymentAccountFactory() {
        final Function function = new Function(FUNC_PAYMENTACCOUNTFACTORY,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> paymentReceiver() {
        final Function function = new Function(FUNC_PAYMENTRECEIVER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> paymentToken() {
        final Function function = new Function(FUNC_PAYMENTTOKEN,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> processAuthorizationChange(String paymentAccount,
                                                                             String card, BigInteger transactionId, BigInteger amount) {
        final Function function = new Function(
                FUNC_PROCESSAUTHORIZATIONCHANGE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, paymentAccount),
                        new org.web3j.abi.datatypes.Address(160, card),
                        new org.web3j.abi.datatypes.generated.Uint256(transactionId),
                        new org.web3j.abi.datatypes.generated.Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> processDebt(String paymentAccount, String card,
                                                              BigInteger amount) {
        final Function function = new Function(
                FUNC_PROCESSDEBT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, paymentAccount),
                        new org.web3j.abi.datatypes.Address(160, card),
                        new org.web3j.abi.datatypes.generated.Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> processNoConfirmationAuthorization(
            String paymentAccount, String card, BigInteger transactionId, BigInteger amount,
            Boolean forced) {
        final Function function = new Function(
                FUNC_PROCESSNOCONFIRMATIONAUTHORIZATION,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, paymentAccount),
                        new org.web3j.abi.datatypes.Address(160, card),
                        new org.web3j.abi.datatypes.generated.Uint256(transactionId),
                        new org.web3j.abi.datatypes.generated.Uint256(amount),
                        new org.web3j.abi.datatypes.Bool(forced)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> processOtpAuthorization(String paymentAccount,
                                                                          String card, BigInteger transactionId, BigInteger amount, byte[] otp,
                                                                          BigInteger otpCounter, Boolean forced) {
        final Function function = new Function(
                FUNC_PROCESSOTPAUTHORIZATION,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, paymentAccount),
                        new org.web3j.abi.datatypes.Address(160, card),
                        new org.web3j.abi.datatypes.generated.Uint256(transactionId),
                        new org.web3j.abi.datatypes.generated.Uint256(amount),
                        new org.web3j.abi.datatypes.generated.Bytes16(otp),
                        new org.web3j.abi.datatypes.generated.Uint16(otpCounter),
                        new org.web3j.abi.datatypes.Bool(forced)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> processRefund(String paymentAccount, String card,
                                                                BigInteger transactionId, BigInteger refundAmount) {
        final Function function = new Function(
                FUNC_PROCESSREFUND,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, paymentAccount),
                        new org.web3j.abi.datatypes.Address(160, card),
                        new org.web3j.abi.datatypes.generated.Uint256(transactionId),
                        new org.web3j.abi.datatypes.generated.Uint256(refundAmount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> processRefundCallback() {
        final Function function = new Function(
                FUNC_PROCESSREFUNDCALLBACK,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> processSettlement(String paymentAccount,
                                                                    String card, BigInteger transactionId, BigInteger amount) {
        final Function function = new Function(
                FUNC_PROCESSSETTLEMENT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, paymentAccount),
                        new org.web3j.abi.datatypes.Address(160, card),
                        new org.web3j.abi.datatypes.generated.Uint256(transactionId),
                        new org.web3j.abi.datatypes.generated.Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> processSignatureAuthorization(
            String paymentAccount, String card, BigInteger transactionId, BigInteger amount,
            byte[] signature, Boolean forced) {
        final Function function = new Function(
                FUNC_PROCESSSIGNATUREAUTHORIZATION,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, paymentAccount),
                        new org.web3j.abi.datatypes.Address(160, card),
                        new org.web3j.abi.datatypes.generated.Uint256(transactionId),
                        new org.web3j.abi.datatypes.generated.Uint256(amount),
                        new org.web3j.abi.datatypes.DynamicBytes(signature),
                        new org.web3j.abi.datatypes.Bool(forced)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> processUnsettledTransaction(String paymentAccount,
                                                                              String card, BigInteger transactionId) {
        final Function function = new Function(
                FUNC_PROCESSUNSETTLEDTRANSACTION,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, paymentAccount),
                        new org.web3j.abi.datatypes.Address(160, card),
                        new org.web3j.abi.datatypes.generated.Uint256(transactionId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> processWithdrawal(String paymentAccount) {
        final Function function = new Function(
                FUNC_PROCESSWITHDRAWAL,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, paymentAccount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> refundAccount() {
        final Function function = new Function(FUNC_REFUNDACCOUNT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceRole(byte[] role,
                                                               String callerConfirmation) {
        final Function function = new Function(
                FUNC_RENOUNCEROLE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role),
                        new org.web3j.abi.datatypes.Address(160, callerConfirmation)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> revokeRole(byte[] role, String account) {
        final Function function = new Function(
                FUNC_REVOKEROLE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role),
                        new org.web3j.abi.datatypes.Address(160, account)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> securityDelay() {
        final Function function = new Function(FUNC_SECURITYDELAY,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> setAuthLimitMarginFor(String paymentAccount,
                                                                        BigInteger authLimitMargin) {
        final Function function = new Function(
                FUNC_SETAUTHLIMITMARGINFOR,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, paymentAccount),
                        new org.web3j.abi.datatypes.generated.Uint256(authLimitMargin)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setPaymentReceiver(String paymentReceiver_) {
        final Function function = new Function(
                FUNC_SETPAYMENTRECEIVER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, paymentReceiver_)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setRefundAccount(String refundAccount_) {
        final Function function = new Function(
                FUNC_SETREFUNDACCOUNT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, refundAccount_)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setSecurityDelay(BigInteger securityDelay_) {
        final Function function = new Function(
                FUNC_SETSECURITYDELAY,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(securityDelay_)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setVerifiedBalanceFor(String paymentAccount,
                                                                        BigInteger verifiedBalance) {
        final Function function = new Function(
                FUNC_SETVERIFIEDBALANCEFOR,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, paymentAccount),
                        new org.web3j.abi.datatypes.generated.Uint256(verifiedBalance)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final Function function = new Function(FUNC_SUPPORTSINTERFACE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> unpause() {
        final Function function = new Function(
                FUNC_UNPAUSE,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> writeOffDebt(String paymentAccount, String card,
                                                               BigInteger amount) {
        final Function function = new Function(
                FUNC_WRITEOFFDEBT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, paymentAccount),
                        new org.web3j.abi.datatypes.Address(160, card),
                        new org.web3j.abi.datatypes.generated.Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static TangemBridgeProcessor load(String contractAddress, Web3j web3j,
                                             Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new TangemBridgeProcessor(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static TangemBridgeProcessor load(String contractAddress, Web3j web3j,
                                             TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new TangemBridgeProcessor(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static TangemBridgeProcessor load(String contractAddress, Web3j web3j,
                                             Credentials credentials, ContractGasProvider contractGasProvider) {
        return new TangemBridgeProcessor(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static TangemBridgeProcessor load(String contractAddress, Web3j web3j,
                                             TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new TangemBridgeProcessor(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<TangemBridgeProcessor> deploy(Web3j web3j, Credentials credentials,
                                                           ContractGasProvider contractGasProvider, String paymentReceiver_, String refundAccount_,
                                                           String paymentAccountFactory_, String paymentToken_, BigInteger securityDelay_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, paymentReceiver_),
                new org.web3j.abi.datatypes.Address(160, refundAccount_),
                new org.web3j.abi.datatypes.Address(160, paymentAccountFactory_),
                new org.web3j.abi.datatypes.Address(160, paymentToken_),
                new org.web3j.abi.datatypes.generated.Uint256(securityDelay_)));
        return deployRemoteCall(TangemBridgeProcessor.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    public static RemoteCall<TangemBridgeProcessor> deploy(Web3j web3j,
                                                           TransactionManager transactionManager, ContractGasProvider contractGasProvider,
                                                           String paymentReceiver_, String refundAccount_, String paymentAccountFactory_,
                                                           String paymentToken_, BigInteger securityDelay_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, paymentReceiver_),
                new org.web3j.abi.datatypes.Address(160, refundAccount_),
                new org.web3j.abi.datatypes.Address(160, paymentAccountFactory_),
                new org.web3j.abi.datatypes.Address(160, paymentToken_),
                new org.web3j.abi.datatypes.generated.Uint256(securityDelay_)));
        return deployRemoteCall(TangemBridgeProcessor.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<TangemBridgeProcessor> deploy(Web3j web3j, Credentials credentials,
                                                           BigInteger gasPrice, BigInteger gasLimit, String paymentReceiver_,
                                                           String refundAccount_, String paymentAccountFactory_, String paymentToken_,
                                                           BigInteger securityDelay_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, paymentReceiver_),
                new org.web3j.abi.datatypes.Address(160, refundAccount_),
                new org.web3j.abi.datatypes.Address(160, paymentAccountFactory_),
                new org.web3j.abi.datatypes.Address(160, paymentToken_),
                new org.web3j.abi.datatypes.generated.Uint256(securityDelay_)));
        return deployRemoteCall(TangemBridgeProcessor.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<TangemBridgeProcessor> deploy(Web3j web3j,
                                                           TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit,
                                                           String paymentReceiver_, String refundAccount_, String paymentAccountFactory_,
                                                           String paymentToken_, BigInteger securityDelay_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, paymentReceiver_),
                new org.web3j.abi.datatypes.Address(160, refundAccount_),
                new org.web3j.abi.datatypes.Address(160, paymentAccountFactory_),
                new org.web3j.abi.datatypes.Address(160, paymentToken_),
                new org.web3j.abi.datatypes.generated.Uint256(securityDelay_)));
        return deployRemoteCall(TangemBridgeProcessor.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    public static void linkLibraries(List<Contract.LinkReference> references) {
        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class OtpState extends StaticStruct {
        public byte[] otp;

        public BigInteger counter;

        public OtpState(byte[] otp, BigInteger counter) {
            super(new org.web3j.abi.datatypes.generated.Bytes16(otp),
                    new org.web3j.abi.datatypes.generated.Uint16(counter));
            this.otp = otp;
            this.counter = counter;
        }

        public OtpState(Bytes16 otp, Uint16 counter) {
            super(otp, counter);
            this.otp = otp.getValue();
            this.counter = counter.getValue();
        }
    }

    public static class LimitsParams extends StaticStruct {
        public BigInteger singleTransactionLimit;

        public BigInteger spendLimit;

        public BigInteger noConfirmationSpendLimit;

        public BigInteger spendLimitsPeriod;

        public LimitsParams(BigInteger singleTransactionLimit, BigInteger spendLimit,
                            BigInteger noConfirmationSpendLimit, BigInteger spendLimitsPeriod) {
            super(new org.web3j.abi.datatypes.generated.Uint256(singleTransactionLimit),
                    new org.web3j.abi.datatypes.generated.Uint256(spendLimit),
                    new org.web3j.abi.datatypes.generated.Uint256(noConfirmationSpendLimit),
                    new org.web3j.abi.datatypes.generated.Uint256(spendLimitsPeriod));
            this.singleTransactionLimit = singleTransactionLimit;
            this.spendLimit = spendLimit;
            this.noConfirmationSpendLimit = noConfirmationSpendLimit;
            this.spendLimitsPeriod = spendLimitsPeriod;
        }

        public LimitsParams(Uint256 singleTransactionLimit, Uint256 spendLimit,
                            Uint256 noConfirmationSpendLimit, Uint256 spendLimitsPeriod) {
            super(singleTransactionLimit, spendLimit, noConfirmationSpendLimit, spendLimitsPeriod);
            this.singleTransactionLimit = singleTransactionLimit.getValue();
            this.spendLimit = spendLimit.getValue();
            this.noConfirmationSpendLimit = noConfirmationSpendLimit.getValue();
            this.spendLimitsPeriod = spendLimitsPeriod.getValue();
        }
    }

    public static class CardParams extends StaticStruct {
        public Boolean isOwner;

        public OtpState otpState;

        public LimitsParams limitsParams;

        public CardParams(Boolean isOwner, OtpState otpState, LimitsParams limitsParams) {
            super(new org.web3j.abi.datatypes.Bool(isOwner),
                    otpState,
                    limitsParams);
            this.isOwner = isOwner;
            this.otpState = otpState;
            this.limitsParams = limitsParams;
        }

        public CardParams(Bool isOwner, OtpState otpState, LimitsParams limitsParams) {
            super(isOwner, otpState, limitsParams);
            this.isOwner = isOwner.getValue();
            this.otpState = otpState;
            this.limitsParams = limitsParams;
        }
    }

    public static class AuthLimitMarginSetForEventResponse extends BaseEventResponse {
        public String paymentAccount;

        public BigInteger authLimitMargin;
    }

    public static class AuthorizationChangeProcessedEventResponse extends BaseEventResponse {
        public String paymentAccount;

        public String card;

        public BigInteger transactionId;

        public BigInteger amount;
    }

    public static class AuthorizationProcessedEventResponse extends BaseEventResponse {
        public String paymentAccount;

        public String card;

        public BigInteger transactionId;

        public BigInteger amount;
    }

    public static class DebtProcessedEventResponse extends BaseEventResponse {
        public String paymentAccount;

        public String card;

        public BigInteger amount;
    }

    public static class DebtWriteOffProcessedEventResponse extends BaseEventResponse {
        public String paymentAccount;

        public String card;

        public BigInteger amount;
    }

    public static class PausedEventResponse extends BaseEventResponse {
        public String account;
    }

    public static class PaymentAccountDeployedEventResponse extends BaseEventResponse {
        public String owner;

        public String cardAddress;

        public String paymentAccount;
    }

    public static class PaymentReceiverSetEventResponse extends BaseEventResponse {
        public String paymentReceiver;
    }

    public static class RefundAccountSetEventResponse extends BaseEventResponse {
        public String refundAccount;
    }

    public static class RefundProcessedEventResponse extends BaseEventResponse {
        public String paymentAccount;

        public String card;

        public BigInteger transactionId;

        public BigInteger amount;
    }

    public static class RoleAdminChangedEventResponse extends BaseEventResponse {
        public byte[] role;

        public byte[] previousAdminRole;

        public byte[] newAdminRole;
    }

    public static class RoleGrantedEventResponse extends BaseEventResponse {
        public byte[] role;

        public String account;

        public String sender;
    }

    public static class RoleRevokedEventResponse extends BaseEventResponse {
        public byte[] role;

        public String account;

        public String sender;
    }

    public static class SecurityDelaySetEventResponse extends BaseEventResponse {
        public BigInteger securityDelay;
    }

    public static class SettlementPeriodSetEventResponse extends BaseEventResponse {
        public BigInteger settlementPeriod;
    }

    public static class SettlementProcessedEventResponse extends BaseEventResponse {
        public String paymentAccount;

        public String card;

        public BigInteger transactionId;

        public BigInteger amount;
    }

    public static class UnpausedEventResponse extends BaseEventResponse {
        public String account;
    }

    public static class UnsettledTransactionProcessedEventResponse extends BaseEventResponse {
        public String paymentAccount;

        public String card;

        public BigInteger transactionId;
    }

    public static class VerifiedBalanceIncreasedForEventResponse extends BaseEventResponse {
        public String paymentAccount;

        public BigInteger increase;
    }

    public static class VerifiedBalanceSetForEventResponse extends BaseEventResponse {
        public String paymentAccount;

        public BigInteger verifiedBalance;
    }

    public static class WithdrawalProcessedEventResponse extends BaseEventResponse {
        public String paymentAccount;
    }
}