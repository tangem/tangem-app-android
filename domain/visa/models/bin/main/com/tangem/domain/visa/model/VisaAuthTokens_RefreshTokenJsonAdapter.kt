// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "UNUSED_PARAMETER", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.tangem.domain.visa.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class VisaAuthTokens_RefreshTokenJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<VisaAuthTokens.RefreshToken>() {
  private val options: JsonReader.Options = JsonReader.Options.of("value", "authType")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "value")

  private val typeAdapter: JsonAdapter<VisaAuthTokens.RefreshToken.Type> =
      moshi.adapter(VisaAuthTokens.RefreshToken.Type::class.java, emptySet(), "authType")

  public override fun toString(): String = buildString(49) {
      append("GeneratedJsonAdapter(").append("VisaAuthTokens.RefreshToken").append(')') }

  public override fun fromJson(reader: JsonReader): VisaAuthTokens.RefreshToken {
    var value__: String? = null
    var authType: VisaAuthTokens.RefreshToken.Type? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> value__ = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("value__",
            "value", reader)
        1 -> authType = typeAdapter.fromJson(reader) ?: throw Util.unexpectedNull("authType",
            "authType", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return VisaAuthTokens.RefreshToken(
        `value` = value__ ?: throw Util.missingProperty("value__", "value", reader),
        authType = authType ?: throw Util.missingProperty("authType", "authType", reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: VisaAuthTokens.RefreshToken?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("value")
    stringAdapter.toJson(writer, value_.`value`)
    writer.name("authType")
    typeAdapter.toJson(writer, value_.authType)
    writer.endObject()
  }
}