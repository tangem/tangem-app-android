// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "UNUSED_PARAMETER", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.tangem.domain.models.scan

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.`internal`.Util
import com.tangem.common.card.EncryptionMode
import java.lang.NullPointerException
import java.lang.reflect.Constructor
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.jvm.Volatile
import kotlin.text.buildString

public class CardDTO_SettingsJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<CardDTO.Settings>() {
  private val options: JsonReader.Options = JsonReader.Options.of("securityDelay",
      "maxWalletsCount", "isSettingAccessCodeAllowed", "isSettingPasscodeAllowed",
      "isResettingUserCodesAllowed", "isLinkedTerminalEnabled", "isBackupAllowed",
      "supportedEncryptionModes", "isFilesAllowed", "isHDWalletAllowed", "isKeysImportAllowed")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(),
      "securityDelay")

  private val booleanAdapter: JsonAdapter<Boolean> = moshi.adapter(Boolean::class.java, emptySet(),
      "isSettingAccessCodeAllowed")

  private val listOfEncryptionModeAdapter: JsonAdapter<List<EncryptionMode>> =
      moshi.adapter(Types.newParameterizedType(List::class.java, EncryptionMode::class.java),
      emptySet(), "supportedEncryptionModes")

  @Volatile
  private var constructorRef: Constructor<CardDTO.Settings>? = null

  public override fun toString(): String = buildString(38) {
      append("GeneratedJsonAdapter(").append("CardDTO.Settings").append(')') }

  public override fun fromJson(reader: JsonReader): CardDTO.Settings {
    var securityDelay: Int? = null
    var maxWalletsCount: Int? = null
    var isSettingAccessCodeAllowed: Boolean? = null
    var isSettingPasscodeAllowed: Boolean? = null
    var isResettingUserCodesAllowed: Boolean? = null
    var isLinkedTerminalEnabled: Boolean? = null
    var isBackupAllowed: Boolean? = null
    var supportedEncryptionModes: List<EncryptionMode>? = null
    var isFilesAllowed: Boolean? = null
    var isHDWalletAllowed: Boolean? = null
    var isKeysImportAllowed: Boolean? = false
    var mask0 = -1
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> securityDelay = intAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("securityDelay", "securityDelay", reader)
        1 -> maxWalletsCount = intAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("maxWalletsCount", "maxWalletsCount", reader)
        2 -> isSettingAccessCodeAllowed = booleanAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("isSettingAccessCodeAllowed", "isSettingAccessCodeAllowed",
            reader)
        3 -> isSettingPasscodeAllowed = booleanAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("isSettingPasscodeAllowed", "isSettingPasscodeAllowed",
            reader)
        4 -> isResettingUserCodesAllowed = booleanAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("isResettingUserCodesAllowed", "isResettingUserCodesAllowed",
            reader)
        5 -> isLinkedTerminalEnabled = booleanAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("isLinkedTerminalEnabled", "isLinkedTerminalEnabled", reader)
        6 -> isBackupAllowed = booleanAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("isBackupAllowed", "isBackupAllowed", reader)
        7 -> supportedEncryptionModes = listOfEncryptionModeAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("supportedEncryptionModes", "supportedEncryptionModes",
            reader)
        8 -> isFilesAllowed = booleanAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("isFilesAllowed", "isFilesAllowed", reader)
        9 -> isHDWalletAllowed = booleanAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("isHDWalletAllowed", "isHDWalletAllowed", reader)
        10 -> {
          isKeysImportAllowed = booleanAdapter.fromJson(reader) ?:
              throw Util.unexpectedNull("isKeysImportAllowed", "isKeysImportAllowed", reader)
          // $mask = $mask and (1 shl 10).inv()
          mask0 = mask0 and 0xfffffbff.toInt()
        }
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    if (mask0 == 0xfffffbff.toInt()) {
      // All parameters with defaults are set, invoke the constructor directly
      return  CardDTO.Settings(
          securityDelay = securityDelay ?: throw Util.missingProperty("securityDelay",
              "securityDelay", reader),
          maxWalletsCount = maxWalletsCount ?: throw Util.missingProperty("maxWalletsCount",
              "maxWalletsCount", reader),
          isSettingAccessCodeAllowed = isSettingAccessCodeAllowed ?:
              throw Util.missingProperty("isSettingAccessCodeAllowed", "isSettingAccessCodeAllowed",
              reader),
          isSettingPasscodeAllowed = isSettingPasscodeAllowed ?:
              throw Util.missingProperty("isSettingPasscodeAllowed", "isSettingPasscodeAllowed",
              reader),
          isResettingUserCodesAllowed = isResettingUserCodesAllowed ?:
              throw Util.missingProperty("isResettingUserCodesAllowed",
              "isResettingUserCodesAllowed", reader),
          isLinkedTerminalEnabled = isLinkedTerminalEnabled ?:
              throw Util.missingProperty("isLinkedTerminalEnabled", "isLinkedTerminalEnabled",
              reader),
          isBackupAllowed = isBackupAllowed ?: throw Util.missingProperty("isBackupAllowed",
              "isBackupAllowed", reader),
          supportedEncryptionModes = supportedEncryptionModes ?:
              throw Util.missingProperty("supportedEncryptionModes", "supportedEncryptionModes",
              reader),
          isFilesAllowed = isFilesAllowed ?: throw Util.missingProperty("isFilesAllowed",
              "isFilesAllowed", reader),
          isHDWalletAllowed = isHDWalletAllowed ?: throw Util.missingProperty("isHDWalletAllowed",
              "isHDWalletAllowed", reader),
          isKeysImportAllowed = isKeysImportAllowed as Boolean
      )
    } else {
      // Reflectively invoke the synthetic defaults constructor
      @Suppress("UNCHECKED_CAST")
      val localConstructor: Constructor<CardDTO.Settings> = this.constructorRef ?:
          CardDTO.Settings::class.java.getDeclaredConstructor(Int::class.javaPrimitiveType,
          Int::class.javaPrimitiveType, Boolean::class.javaPrimitiveType,
          Boolean::class.javaPrimitiveType, Boolean::class.javaPrimitiveType,
          Boolean::class.javaPrimitiveType, Boolean::class.javaPrimitiveType, List::class.java,
          Boolean::class.javaPrimitiveType, Boolean::class.javaPrimitiveType,
          Boolean::class.javaPrimitiveType, Int::class.javaPrimitiveType,
          Util.DEFAULT_CONSTRUCTOR_MARKER).also { this.constructorRef = it }
      return localConstructor.newInstance(
          securityDelay ?: throw Util.missingProperty("securityDelay", "securityDelay", reader),
          maxWalletsCount ?: throw Util.missingProperty("maxWalletsCount", "maxWalletsCount",
              reader),
          isSettingAccessCodeAllowed ?: throw Util.missingProperty("isSettingAccessCodeAllowed",
              "isSettingAccessCodeAllowed", reader),
          isSettingPasscodeAllowed ?: throw Util.missingProperty("isSettingPasscodeAllowed",
              "isSettingPasscodeAllowed", reader),
          isResettingUserCodesAllowed ?: throw Util.missingProperty("isResettingUserCodesAllowed",
              "isResettingUserCodesAllowed", reader),
          isLinkedTerminalEnabled ?: throw Util.missingProperty("isLinkedTerminalEnabled",
              "isLinkedTerminalEnabled", reader),
          isBackupAllowed ?: throw Util.missingProperty("isBackupAllowed", "isBackupAllowed",
              reader),
          supportedEncryptionModes ?: throw Util.missingProperty("supportedEncryptionModes",
              "supportedEncryptionModes", reader),
          isFilesAllowed ?: throw Util.missingProperty("isFilesAllowed", "isFilesAllowed", reader),
          isHDWalletAllowed ?: throw Util.missingProperty("isHDWalletAllowed", "isHDWalletAllowed",
              reader),
          isKeysImportAllowed,
          mask0,
          /* DefaultConstructorMarker */ null
      )
    }
  }

  public override fun toJson(writer: JsonWriter, value_: CardDTO.Settings?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("securityDelay")
    intAdapter.toJson(writer, value_.securityDelay)
    writer.name("maxWalletsCount")
    intAdapter.toJson(writer, value_.maxWalletsCount)
    writer.name("isSettingAccessCodeAllowed")
    booleanAdapter.toJson(writer, value_.isSettingAccessCodeAllowed)
    writer.name("isSettingPasscodeAllowed")
    booleanAdapter.toJson(writer, value_.isSettingPasscodeAllowed)
    writer.name("isResettingUserCodesAllowed")
    booleanAdapter.toJson(writer, value_.isResettingUserCodesAllowed)
    writer.name("isLinkedTerminalEnabled")
    booleanAdapter.toJson(writer, value_.isLinkedTerminalEnabled)
    writer.name("isBackupAllowed")
    booleanAdapter.toJson(writer, value_.isBackupAllowed)
    writer.name("supportedEncryptionModes")
    listOfEncryptionModeAdapter.toJson(writer, value_.supportedEncryptionModes)
    writer.name("isFilesAllowed")
    booleanAdapter.toJson(writer, value_.isFilesAllowed)
    writer.name("isHDWalletAllowed")
    booleanAdapter.toJson(writer, value_.isHDWalletAllowed)
    writer.name("isKeysImportAllowed")
    booleanAdapter.toJson(writer, value_.isKeysImportAllowed)
    writer.endObject()
  }
}