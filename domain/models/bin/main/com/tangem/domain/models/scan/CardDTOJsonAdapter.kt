// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "UNUSED_PARAMETER", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.tangem.domain.models.scan

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.`internal`.Util
import com.tangem.common.card.EllipticCurve
import com.tangem.operations.attestation.Attestation
import java.lang.NullPointerException
import kotlin.Boolean
import kotlin.ByteArray
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.text.buildString

public class CardDTOJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<CardDTO>() {
  private val options: JsonReader.Options = JsonReader.Options.of("cardId", "batchId",
      "cardPublicKey", "firmwareVersion", "manufacturer", "issuer", "settings", "userSettings",
      "linkedTerminalStatus", "isAccessCodeSet", "isPasscodeSet", "supportedCurves", "wallets",
      "attestation", "backupStatus")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "cardId")

  private val byteArrayAdapter: JsonAdapter<ByteArray> = moshi.adapter(ByteArray::class.java,
      emptySet(), "cardPublicKey")

  private val firmwareVersionAdapter: JsonAdapter<CardDTO.FirmwareVersion> =
      moshi.adapter(CardDTO.FirmwareVersion::class.java, emptySet(), "firmwareVersion")

  private val manufacturerAdapter: JsonAdapter<CardDTO.Manufacturer> =
      moshi.adapter(CardDTO.Manufacturer::class.java, emptySet(), "manufacturer")

  private val issuerAdapter: JsonAdapter<CardDTO.Issuer> = moshi.adapter(CardDTO.Issuer::class.java,
      emptySet(), "issuer")

  private val settingsAdapter: JsonAdapter<CardDTO.Settings> =
      moshi.adapter(CardDTO.Settings::class.java, emptySet(), "settings")

  private val nullableUserSettingsAdapter: JsonAdapter<CardDTO.UserSettings?> =
      moshi.adapter(CardDTO.UserSettings::class.java, emptySet(), "userSettings")

  private val linkedTerminalStatusAdapter: JsonAdapter<CardDTO.LinkedTerminalStatus> =
      moshi.adapter(CardDTO.LinkedTerminalStatus::class.java, emptySet(), "linkedTerminalStatus")

  private val booleanAdapter: JsonAdapter<Boolean> = moshi.adapter(Boolean::class.java, emptySet(),
      "isAccessCodeSet")

  private val nullableBooleanAdapter: JsonAdapter<Boolean?> =
      moshi.adapter(Boolean::class.javaObjectType, emptySet(), "isPasscodeSet")

  private val listOfEllipticCurveAdapter: JsonAdapter<List<EllipticCurve>> =
      moshi.adapter(Types.newParameterizedType(List::class.java, EllipticCurve::class.java),
      emptySet(), "supportedCurves")

  private val listOfWalletAdapter: JsonAdapter<List<CardDTO.Wallet>> =
      moshi.adapter(Types.newParameterizedType(List::class.java, CardDTO.Wallet::class.java),
      emptySet(), "wallets")

  private val attestationAdapter: JsonAdapter<Attestation> = moshi.adapter(Attestation::class.java,
      emptySet(), "attestation")

  private val nullableBackupStatusAdapter: JsonAdapter<CardDTO.BackupStatus?> =
      moshi.adapter(CardDTO.BackupStatus::class.java, emptySet(), "backupStatus")

  public override fun toString(): String = buildString(29) {
      append("GeneratedJsonAdapter(").append("CardDTO").append(')') }

  public override fun fromJson(reader: JsonReader): CardDTO {
    var cardId: String? = null
    var batchId: String? = null
    var cardPublicKey: ByteArray? = null
    var firmwareVersion: CardDTO.FirmwareVersion? = null
    var manufacturer: CardDTO.Manufacturer? = null
    var issuer: CardDTO.Issuer? = null
    var settings: CardDTO.Settings? = null
    var userSettings: CardDTO.UserSettings? = null
    var linkedTerminalStatus: CardDTO.LinkedTerminalStatus? = null
    var isAccessCodeSet: Boolean? = null
    var isPasscodeSet: Boolean? = null
    var supportedCurves: List<EllipticCurve>? = null
    var wallets: List<CardDTO.Wallet>? = null
    var attestation: Attestation? = null
    var backupStatus: CardDTO.BackupStatus? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> cardId = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("cardId",
            "cardId", reader)
        1 -> batchId = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("batchId",
            "batchId", reader)
        2 -> cardPublicKey = byteArrayAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("cardPublicKey", "cardPublicKey", reader)
        3 -> firmwareVersion = firmwareVersionAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("firmwareVersion", "firmwareVersion", reader)
        4 -> manufacturer = manufacturerAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("manufacturer", "manufacturer", reader)
        5 -> issuer = issuerAdapter.fromJson(reader) ?: throw Util.unexpectedNull("issuer",
            "issuer", reader)
        6 -> settings = settingsAdapter.fromJson(reader) ?: throw Util.unexpectedNull("settings",
            "settings", reader)
        7 -> userSettings = nullableUserSettingsAdapter.fromJson(reader)
        8 -> linkedTerminalStatus = linkedTerminalStatusAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("linkedTerminalStatus", "linkedTerminalStatus", reader)
        9 -> isAccessCodeSet = booleanAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("isAccessCodeSet", "isAccessCodeSet", reader)
        10 -> isPasscodeSet = nullableBooleanAdapter.fromJson(reader)
        11 -> supportedCurves = listOfEllipticCurveAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("supportedCurves", "supportedCurves", reader)
        12 -> wallets = listOfWalletAdapter.fromJson(reader) ?: throw Util.unexpectedNull("wallets",
            "wallets", reader)
        13 -> attestation = attestationAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("attestation", "attestation", reader)
        14 -> backupStatus = nullableBackupStatusAdapter.fromJson(reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return CardDTO(
        cardId = cardId ?: throw Util.missingProperty("cardId", "cardId", reader),
        batchId = batchId ?: throw Util.missingProperty("batchId", "batchId", reader),
        cardPublicKey = cardPublicKey ?: throw Util.missingProperty("cardPublicKey",
            "cardPublicKey", reader),
        firmwareVersion = firmwareVersion ?: throw Util.missingProperty("firmwareVersion",
            "firmwareVersion", reader),
        manufacturer = manufacturer ?: throw Util.missingProperty("manufacturer", "manufacturer",
            reader),
        issuer = issuer ?: throw Util.missingProperty("issuer", "issuer", reader),
        settings = settings ?: throw Util.missingProperty("settings", "settings", reader),
        userSettings = userSettings,
        linkedTerminalStatus = linkedTerminalStatus ?:
            throw Util.missingProperty("linkedTerminalStatus", "linkedTerminalStatus", reader),
        isAccessCodeSet = isAccessCodeSet ?: throw Util.missingProperty("isAccessCodeSet",
            "isAccessCodeSet", reader),
        isPasscodeSet = isPasscodeSet,
        supportedCurves = supportedCurves ?: throw Util.missingProperty("supportedCurves",
            "supportedCurves", reader),
        wallets = wallets ?: throw Util.missingProperty("wallets", "wallets", reader),
        attestation = attestation ?: throw Util.missingProperty("attestation", "attestation",
            reader),
        backupStatus = backupStatus
    )
  }

  public override fun toJson(writer: JsonWriter, value_: CardDTO?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("cardId")
    stringAdapter.toJson(writer, value_.cardId)
    writer.name("batchId")
    stringAdapter.toJson(writer, value_.batchId)
    writer.name("cardPublicKey")
    byteArrayAdapter.toJson(writer, value_.cardPublicKey)
    writer.name("firmwareVersion")
    firmwareVersionAdapter.toJson(writer, value_.firmwareVersion)
    writer.name("manufacturer")
    manufacturerAdapter.toJson(writer, value_.manufacturer)
    writer.name("issuer")
    issuerAdapter.toJson(writer, value_.issuer)
    writer.name("settings")
    settingsAdapter.toJson(writer, value_.settings)
    writer.name("userSettings")
    nullableUserSettingsAdapter.toJson(writer, value_.userSettings)
    writer.name("linkedTerminalStatus")
    linkedTerminalStatusAdapter.toJson(writer, value_.linkedTerminalStatus)
    writer.name("isAccessCodeSet")
    booleanAdapter.toJson(writer, value_.isAccessCodeSet)
    writer.name("isPasscodeSet")
    nullableBooleanAdapter.toJson(writer, value_.isPasscodeSet)
    writer.name("supportedCurves")
    listOfEllipticCurveAdapter.toJson(writer, value_.supportedCurves)
    writer.name("wallets")
    listOfWalletAdapter.toJson(writer, value_.wallets)
    writer.name("attestation")
    attestationAdapter.toJson(writer, value_.attestation)
    writer.name("backupStatus")
    nullableBackupStatusAdapter.toJson(writer, value_.backupStatus)
    writer.endObject()
  }
}