// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "UNUSED_PARAMETER", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.tangem.domain.models.scan

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import com.tangem.common.card.FirmwareVersion
import java.lang.NullPointerException
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class CardDTO_FirmwareVersionJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<CardDTO.FirmwareVersion>() {
  private val options: JsonReader.Options = JsonReader.Options.of("major", "minor", "patch", "type")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "major")

  private val firmwareTypeAdapter: JsonAdapter<FirmwareVersion.FirmwareType> =
      moshi.adapter(FirmwareVersion.FirmwareType::class.java, emptySet(), "type")

  public override fun toString(): String = buildString(45) {
      append("GeneratedJsonAdapter(").append("CardDTO.FirmwareVersion").append(')') }

  public override fun fromJson(reader: JsonReader): CardDTO.FirmwareVersion {
    var major: Int? = null
    var minor: Int? = null
    var patch: Int? = null
    var type: FirmwareVersion.FirmwareType? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> major = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("major", "major",
            reader)
        1 -> minor = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("minor", "minor",
            reader)
        2 -> patch = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("patch", "patch",
            reader)
        3 -> type = firmwareTypeAdapter.fromJson(reader) ?: throw Util.unexpectedNull("type",
            "type", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return CardDTO.FirmwareVersion(
        major = major ?: throw Util.missingProperty("major", "major", reader),
        minor = minor ?: throw Util.missingProperty("minor", "minor", reader),
        patch = patch ?: throw Util.missingProperty("patch", "patch", reader),
        type = type ?: throw Util.missingProperty("type", "type", reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: CardDTO.FirmwareVersion?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("major")
    intAdapter.toJson(writer, value_.major)
    writer.name("minor")
    intAdapter.toJson(writer, value_.minor)
    writer.name("patch")
    intAdapter.toJson(writer, value_.patch)
    writer.name("type")
    firmwareTypeAdapter.toJson(writer, value_.type)
    writer.endObject()
  }
}