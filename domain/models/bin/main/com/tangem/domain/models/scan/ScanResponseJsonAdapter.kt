// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "UNUSED_PARAMETER", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.tangem.domain.models.scan

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.`internal`.Util
import com.tangem.common.card.WalletData
import com.tangem.common.extensions.ByteArrayKey
import com.tangem.domain.visa.model.VisaCardActivationStatus
import com.tangem.operations.backup.PrimaryCard
import com.tangem.operations.derivation.ExtendedPublicKeysMap
import java.lang.NullPointerException
import java.lang.reflect.Constructor
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.Map
import kotlin.collections.emptySet
import kotlin.jvm.Volatile
import kotlin.text.buildString

public class ScanResponseJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<ScanResponse>() {
  private val options: JsonReader.Options = JsonReader.Options.of("card", "productType",
      "walletData", "secondTwinPublicKey", "visaCardActivationStatus", "derivedKeys", "primaryCard")

  private val cardDTOAdapter: JsonAdapter<CardDTO> = moshi.adapter(CardDTO::class.java, emptySet(),
      "card")

  private val productTypeAdapter: JsonAdapter<ProductType> = moshi.adapter(ProductType::class.java,
      emptySet(), "productType")

  private val nullableWalletDataAdapter: JsonAdapter<WalletData?> =
      moshi.adapter(WalletData::class.java, emptySet(), "walletData")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "secondTwinPublicKey")

  private val nullableVisaCardActivationStatusAdapter: JsonAdapter<VisaCardActivationStatus?> =
      moshi.adapter(VisaCardActivationStatus::class.java, emptySet(), "visaCardActivationStatus")

  private val mapOfByteArrayKeyExtendedPublicKeysMapAdapter:
      JsonAdapter<Map<ByteArrayKey, ExtendedPublicKeysMap>> =
      moshi.adapter(Types.newParameterizedType(Map::class.java, ByteArrayKey::class.java,
      ExtendedPublicKeysMap::class.java), emptySet(), "derivedKeys")

  private val nullablePrimaryCardAdapter: JsonAdapter<PrimaryCard?> =
      moshi.adapter(PrimaryCard::class.java, emptySet(), "primaryCard")

  @Volatile
  private var constructorRef: Constructor<ScanResponse>? = null

  public override fun toString(): String = buildString(34) {
      append("GeneratedJsonAdapter(").append("ScanResponse").append(')') }

  public override fun fromJson(reader: JsonReader): ScanResponse {
    var card: CardDTO? = null
    var productType: ProductType? = null
    var walletData: WalletData? = null
    var secondTwinPublicKey: String? = null
    var visaCardActivationStatus: VisaCardActivationStatus? = null
    var derivedKeys: Map<ByteArrayKey, ExtendedPublicKeysMap>? = null
    var primaryCard: PrimaryCard? = null
    var mask0 = -1
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> card = cardDTOAdapter.fromJson(reader) ?: throw Util.unexpectedNull("card", "card",
            reader)
        1 -> productType = productTypeAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("productType", "productType", reader)
        2 -> walletData = nullableWalletDataAdapter.fromJson(reader)
        3 -> {
          secondTwinPublicKey = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 3).inv()
          mask0 = mask0 and 0xfffffff7.toInt()
        }
        4 -> {
          visaCardActivationStatus = nullableVisaCardActivationStatusAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 4).inv()
          mask0 = mask0 and 0xffffffef.toInt()
        }
        5 -> {
          derivedKeys = mapOfByteArrayKeyExtendedPublicKeysMapAdapter.fromJson(reader) ?:
              throw Util.unexpectedNull("derivedKeys", "derivedKeys", reader)
          // $mask = $mask and (1 shl 5).inv()
          mask0 = mask0 and 0xffffffdf.toInt()
        }
        6 -> {
          primaryCard = nullablePrimaryCardAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 6).inv()
          mask0 = mask0 and 0xffffffbf.toInt()
        }
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    if (mask0 == 0xffffff87.toInt()) {
      // All parameters with defaults are set, invoke the constructor directly
      return  ScanResponse(
          card = card ?: throw Util.missingProperty("card", "card", reader),
          productType = productType ?: throw Util.missingProperty("productType", "productType",
              reader),
          walletData = walletData,
          secondTwinPublicKey = secondTwinPublicKey,
          visaCardActivationStatus = visaCardActivationStatus,
          derivedKeys = derivedKeys as Map<KeyWalletPublicKey, ExtendedPublicKeysMap>,
          primaryCard = primaryCard
      )
    } else {
      // Reflectively invoke the synthetic defaults constructor
      @Suppress("UNCHECKED_CAST")
      val localConstructor: Constructor<ScanResponse> = this.constructorRef ?:
          ScanResponse::class.java.getDeclaredConstructor(CardDTO::class.java,
          ProductType::class.java, WalletData::class.java, String::class.java,
          VisaCardActivationStatus::class.java, Map::class.java, PrimaryCard::class.java,
          Int::class.javaPrimitiveType, Util.DEFAULT_CONSTRUCTOR_MARKER).also {
          this.constructorRef = it }
      return localConstructor.newInstance(
          card ?: throw Util.missingProperty("card", "card", reader),
          productType ?: throw Util.missingProperty("productType", "productType", reader),
          walletData,
          secondTwinPublicKey,
          visaCardActivationStatus,
          derivedKeys,
          primaryCard,
          mask0,
          /* DefaultConstructorMarker */ null
      )
    }
  }

  public override fun toJson(writer: JsonWriter, value_: ScanResponse?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("card")
    cardDTOAdapter.toJson(writer, value_.card)
    writer.name("productType")
    productTypeAdapter.toJson(writer, value_.productType)
    writer.name("walletData")
    nullableWalletDataAdapter.toJson(writer, value_.walletData)
    writer.name("secondTwinPublicKey")
    nullableStringAdapter.toJson(writer, value_.secondTwinPublicKey)
    writer.name("visaCardActivationStatus")
    nullableVisaCardActivationStatusAdapter.toJson(writer, value_.visaCardActivationStatus)
    writer.name("derivedKeys")
    mapOfByteArrayKeyExtendedPublicKeysMapAdapter.toJson(writer, value_.derivedKeys)
    writer.name("primaryCard")
    nullablePrimaryCardAdapter.toJson(writer, value_.primaryCard)
    writer.endObject()
  }
}