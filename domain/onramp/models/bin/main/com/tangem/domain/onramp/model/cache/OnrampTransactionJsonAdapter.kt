// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "UNUSED_PARAMETER", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.tangem.domain.onramp.model.cache

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import com.tangem.domain.onramp.model.OnrampCurrency
import com.tangem.domain.onramp.model.OnrampStatus
import com.tangem.domain.wallets.models.UserWalletId
import java.lang.NullPointerException
import java.math.BigDecimal
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class OnrampTransactionJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<OnrampTransaction>() {
  private val options: JsonReader.Options = JsonReader.Options.of("txId", "userWalletId",
      "fromAmount", "fromCurrency", "toAmount", "toCurrencyId", "status", "externalTxUrl",
      "externalTxId", "timestamp", "providerName", "providerImageUrl", "providerType",
      "redirectUrl", "paymentMethod", "residency")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "txId")

  private val userWalletIdAdapter: JsonAdapter<UserWalletId> =
      moshi.adapter(UserWalletId::class.java, emptySet(), "userWalletId")

  private val bigDecimalAdapter: JsonAdapter<BigDecimal> = moshi.adapter(BigDecimal::class.java,
      emptySet(), "fromAmount")

  private val onrampCurrencyAdapter: JsonAdapter<OnrampCurrency> =
      moshi.adapter(OnrampCurrency::class.java, emptySet(), "fromCurrency")

  private val statusAdapter: JsonAdapter<OnrampStatus.Status> =
      moshi.adapter(OnrampStatus.Status::class.java, emptySet(), "status")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "externalTxUrl")

  private val longAdapter: JsonAdapter<Long> = moshi.adapter(Long::class.java, emptySet(),
      "timestamp")

  public override fun toString(): String = buildString(39) {
      append("GeneratedJsonAdapter(").append("OnrampTransaction").append(')') }

  public override fun fromJson(reader: JsonReader): OnrampTransaction {
    var txId: String? = null
    var userWalletId: UserWalletId? = null
    var fromAmount: BigDecimal? = null
    var fromCurrency: OnrampCurrency? = null
    var toAmount: BigDecimal? = null
    var toCurrencyId: String? = null
    var status: OnrampStatus.Status? = null
    var externalTxUrl: String? = null
    var externalTxId: String? = null
    var timestamp: Long? = null
    var providerName: String? = null
    var providerImageUrl: String? = null
    var providerType: String? = null
    var redirectUrl: String? = null
    var paymentMethod: String? = null
    var residency: String? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> txId = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("txId", "txId",
            reader)
        1 -> userWalletId = userWalletIdAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("userWalletId", "userWalletId", reader)
        2 -> fromAmount = bigDecimalAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("fromAmount", "fromAmount", reader)
        3 -> fromCurrency = onrampCurrencyAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("fromCurrency", "fromCurrency", reader)
        4 -> toAmount = bigDecimalAdapter.fromJson(reader) ?: throw Util.unexpectedNull("toAmount",
            "toAmount", reader)
        5 -> toCurrencyId = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("toCurrencyId", "toCurrencyId", reader)
        6 -> status = statusAdapter.fromJson(reader) ?: throw Util.unexpectedNull("status",
            "status", reader)
        7 -> externalTxUrl = nullableStringAdapter.fromJson(reader)
        8 -> externalTxId = nullableStringAdapter.fromJson(reader)
        9 -> timestamp = longAdapter.fromJson(reader) ?: throw Util.unexpectedNull("timestamp",
            "timestamp", reader)
        10 -> providerName = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("providerName", "providerName", reader)
        11 -> providerImageUrl = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("providerImageUrl", "providerImageUrl", reader)
        12 -> providerType = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("providerType", "providerType", reader)
        13 -> redirectUrl = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("redirectUrl", "redirectUrl", reader)
        14 -> paymentMethod = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("paymentMethod", "paymentMethod", reader)
        15 -> residency = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("residency",
            "residency", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return OnrampTransaction(
        txId = txId ?: throw Util.missingProperty("txId", "txId", reader),
        userWalletId = userWalletId ?: throw Util.missingProperty("userWalletId", "userWalletId",
            reader),
        fromAmount = fromAmount ?: throw Util.missingProperty("fromAmount", "fromAmount", reader),
        fromCurrency = fromCurrency ?: throw Util.missingProperty("fromCurrency", "fromCurrency",
            reader),
        toAmount = toAmount ?: throw Util.missingProperty("toAmount", "toAmount", reader),
        toCurrencyId = toCurrencyId ?: throw Util.missingProperty("toCurrencyId", "toCurrencyId",
            reader),
        status = status ?: throw Util.missingProperty("status", "status", reader),
        externalTxUrl = externalTxUrl,
        externalTxId = externalTxId,
        timestamp = timestamp ?: throw Util.missingProperty("timestamp", "timestamp", reader),
        providerName = providerName ?: throw Util.missingProperty("providerName", "providerName",
            reader),
        providerImageUrl = providerImageUrl ?: throw Util.missingProperty("providerImageUrl",
            "providerImageUrl", reader),
        providerType = providerType ?: throw Util.missingProperty("providerType", "providerType",
            reader),
        redirectUrl = redirectUrl ?: throw Util.missingProperty("redirectUrl", "redirectUrl",
            reader),
        paymentMethod = paymentMethod ?: throw Util.missingProperty("paymentMethod",
            "paymentMethod", reader),
        residency = residency ?: throw Util.missingProperty("residency", "residency", reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: OnrampTransaction?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("txId")
    stringAdapter.toJson(writer, value_.txId)
    writer.name("userWalletId")
    userWalletIdAdapter.toJson(writer, value_.userWalletId)
    writer.name("fromAmount")
    bigDecimalAdapter.toJson(writer, value_.fromAmount)
    writer.name("fromCurrency")
    onrampCurrencyAdapter.toJson(writer, value_.fromCurrency)
    writer.name("toAmount")
    bigDecimalAdapter.toJson(writer, value_.toAmount)
    writer.name("toCurrencyId")
    stringAdapter.toJson(writer, value_.toCurrencyId)
    writer.name("status")
    statusAdapter.toJson(writer, value_.status)
    writer.name("externalTxUrl")
    nullableStringAdapter.toJson(writer, value_.externalTxUrl)
    writer.name("externalTxId")
    nullableStringAdapter.toJson(writer, value_.externalTxId)
    writer.name("timestamp")
    longAdapter.toJson(writer, value_.timestamp)
    writer.name("providerName")
    stringAdapter.toJson(writer, value_.providerName)
    writer.name("providerImageUrl")
    stringAdapter.toJson(writer, value_.providerImageUrl)
    writer.name("providerType")
    stringAdapter.toJson(writer, value_.providerType)
    writer.name("redirectUrl")
    stringAdapter.toJson(writer, value_.redirectUrl)
    writer.name("paymentMethod")
    stringAdapter.toJson(writer, value_.paymentMethod)
    writer.name("residency")
    stringAdapter.toJson(writer, value_.residency)
    writer.endObject()
  }
}