// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "UNUSED_PARAMETER", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.tangem.domain.walletconnect.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import java.lang.reflect.Constructor
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.jvm.Volatile
import kotlin.text.buildString

public class WcEthSignTypedDataParams_TypesJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<WcEthSignTypedDataParams.Types>() {
  private val options: JsonReader.Options = JsonReader.Options.of("EIP712Domain", "Mail", "Person")

  private val listOfTypeAdapter: JsonAdapter<List<WcEthSignTypedDataParams.Types.Type>> =
      moshi.adapter(Types.newParameterizedType(List::class.java,
      WcEthSignTypedDataParams.Types.Type::class.java), emptySet(), "eIP712Domain")

  @Volatile
  private var constructorRef: Constructor<WcEthSignTypedDataParams.Types>? = null

  public override fun toString(): String = buildString(52) {
      append("GeneratedJsonAdapter(").append("WcEthSignTypedDataParams.Types").append(')') }

  public override fun fromJson(reader: JsonReader): WcEthSignTypedDataParams.Types {
    var eIP712Domain: List<WcEthSignTypedDataParams.Types.Type>? = null
    var mail: List<WcEthSignTypedDataParams.Types.Type>? = null
    var person: List<WcEthSignTypedDataParams.Types.Type>? = null
    var mask0 = -1
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> {
          eIP712Domain = listOfTypeAdapter.fromJson(reader) ?:
              throw Util.unexpectedNull("eIP712Domain", "EIP712Domain", reader)
          // $mask = $mask and (1 shl 0).inv()
          mask0 = mask0 and 0xfffffffe.toInt()
        }
        1 -> {
          mail = listOfTypeAdapter.fromJson(reader) ?: throw Util.unexpectedNull("mail", "Mail",
              reader)
          // $mask = $mask and (1 shl 1).inv()
          mask0 = mask0 and 0xfffffffd.toInt()
        }
        2 -> {
          person = listOfTypeAdapter.fromJson(reader) ?: throw Util.unexpectedNull("person",
              "Person", reader)
          // $mask = $mask and (1 shl 2).inv()
          mask0 = mask0 and 0xfffffffb.toInt()
        }
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    if (mask0 == 0xfffffff8.toInt()) {
      // All parameters with defaults are set, invoke the constructor directly
      return  WcEthSignTypedDataParams.Types(
          eIP712Domain = eIP712Domain as List<WcEthSignTypedDataParams.Types.Type>,
          mail = mail as List<WcEthSignTypedDataParams.Types.Type>,
          person = person as List<WcEthSignTypedDataParams.Types.Type>
      )
    } else {
      // Reflectively invoke the synthetic defaults constructor
      @Suppress("UNCHECKED_CAST")
      val localConstructor: Constructor<WcEthSignTypedDataParams.Types> = this.constructorRef ?:
          WcEthSignTypedDataParams.Types::class.java.getDeclaredConstructor(List::class.java,
          List::class.java, List::class.java, Int::class.javaPrimitiveType,
          Util.DEFAULT_CONSTRUCTOR_MARKER).also { this.constructorRef = it }
      return localConstructor.newInstance(
          eIP712Domain,
          mail,
          person,
          mask0,
          /* DefaultConstructorMarker */ null
      )
    }
  }

  public override fun toJson(writer: JsonWriter, value_: WcEthSignTypedDataParams.Types?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("EIP712Domain")
    listOfTypeAdapter.toJson(writer, value_.eIP712Domain)
    writer.name("Mail")
    listOfTypeAdapter.toJson(writer, value_.mail)
    writer.name("Person")
    listOfTypeAdapter.toJson(writer, value_.person)
    writer.endObject()
  }
}