// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "UNUSED_PARAMETER", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.tangem.domain.walletconnect.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class WcEthSignTypedDataParamsJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<WcEthSignTypedDataParams>() {
  private val options: JsonReader.Options = JsonReader.Options.of("domain", "message",
      "primaryType", "types")

  private val domainAdapter: JsonAdapter<WcEthSignTypedDataParams.Domain> =
      moshi.adapter(WcEthSignTypedDataParams.Domain::class.java, emptySet(), "domain")

  private val messageAdapter: JsonAdapter<WcEthSignTypedDataParams.Message> =
      moshi.adapter(WcEthSignTypedDataParams.Message::class.java, emptySet(), "message")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "primaryType")

  private val typesAdapter: JsonAdapter<WcEthSignTypedDataParams.Types> =
      moshi.adapter(WcEthSignTypedDataParams.Types::class.java, emptySet(), "types")

  public override fun toString(): String = buildString(46) {
      append("GeneratedJsonAdapter(").append("WcEthSignTypedDataParams").append(')') }

  public override fun fromJson(reader: JsonReader): WcEthSignTypedDataParams {
    var domain: WcEthSignTypedDataParams.Domain? = null
    var message: WcEthSignTypedDataParams.Message? = null
    var primaryType: String? = null
    var types_: WcEthSignTypedDataParams.Types? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> domain = domainAdapter.fromJson(reader) ?: throw Util.unexpectedNull("domain",
            "domain", reader)
        1 -> message = messageAdapter.fromJson(reader) ?: throw Util.unexpectedNull("message",
            "message", reader)
        2 -> primaryType = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("primaryType", "primaryType", reader)
        3 -> types_ = typesAdapter.fromJson(reader) ?: throw Util.unexpectedNull("types_", "types",
            reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return WcEthSignTypedDataParams(
        domain = domain ?: throw Util.missingProperty("domain", "domain", reader),
        message = message ?: throw Util.missingProperty("message", "message", reader),
        primaryType = primaryType ?: throw Util.missingProperty("primaryType", "primaryType",
            reader),
        types = types_ ?: throw Util.missingProperty("types_", "types", reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: WcEthSignTypedDataParams?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("domain")
    domainAdapter.toJson(writer, value_.domain)
    writer.name("message")
    messageAdapter.toJson(writer, value_.message)
    writer.name("primaryType")
    stringAdapter.toJson(writer, value_.primaryType)
    writer.name("types")
    typesAdapter.toJson(writer, value_.types)
    writer.endObject()
  }
}