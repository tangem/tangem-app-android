// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "UNUSED_PARAMETER", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.tangem.domain.walletconnect.model

import com.domain.blockaid.models.dapp.CheckDAppResult
import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import com.tangem.domain.wallets.models.UserWalletId
import java.lang.NullPointerException
import java.lang.reflect.Constructor
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.jvm.Volatile
import kotlin.text.buildString

public class WcSessionDTOJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<WcSessionDTO>() {
  private val options: JsonReader.Options = JsonReader.Options.of("topic", "walletId",
      "securityStatus")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "topic")

  private val userWalletIdAdapter: JsonAdapter<UserWalletId> =
      moshi.adapter(UserWalletId::class.java, emptySet(), "walletId")

  private val checkDAppResultAdapter: JsonAdapter<CheckDAppResult> =
      moshi.adapter(CheckDAppResult::class.java, emptySet(), "securityStatus")

  @Volatile
  private var constructorRef: Constructor<WcSessionDTO>? = null

  public override fun toString(): String = buildString(34) {
      append("GeneratedJsonAdapter(").append("WcSessionDTO").append(')') }

  public override fun fromJson(reader: JsonReader): WcSessionDTO {
    var topic: String? = null
    var walletId: UserWalletId? = null
    var securityStatus: CheckDAppResult? = null
    var mask0 = -1
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> topic = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("topic", "topic",
            reader)
        1 -> walletId = userWalletIdAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("walletId", "walletId", reader)
        2 -> {
          securityStatus = checkDAppResultAdapter.fromJson(reader) ?:
              throw Util.unexpectedNull("securityStatus", "securityStatus", reader)
          // $mask = $mask and (1 shl 2).inv()
          mask0 = mask0 and 0xfffffffb.toInt()
        }
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    if (mask0 == 0xfffffffb.toInt()) {
      // All parameters with defaults are set, invoke the constructor directly
      return  WcSessionDTO(
          topic = topic ?: throw Util.missingProperty("topic", "topic", reader),
          walletId = walletId ?: throw Util.missingProperty("walletId", "walletId", reader),
          securityStatus = securityStatus as CheckDAppResult
      )
    } else {
      // Reflectively invoke the synthetic defaults constructor
      @Suppress("UNCHECKED_CAST")
      val localConstructor: Constructor<WcSessionDTO> = this.constructorRef ?:
          WcSessionDTO::class.java.getDeclaredConstructor(String::class.java,
          UserWalletId::class.java, CheckDAppResult::class.java, Int::class.javaPrimitiveType,
          Util.DEFAULT_CONSTRUCTOR_MARKER).also { this.constructorRef = it }
      return localConstructor.newInstance(
          topic ?: throw Util.missingProperty("topic", "topic", reader),
          walletId ?: throw Util.missingProperty("walletId", "walletId", reader),
          securityStatus,
          mask0,
          /* DefaultConstructorMarker */ null
      )
    }
  }

  public override fun toJson(writer: JsonWriter, value_: WcSessionDTO?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("topic")
    stringAdapter.toJson(writer, value_.topic)
    writer.name("walletId")
    userWalletIdAdapter.toJson(writer, value_.walletId)
    writer.name("securityStatus")
    checkDAppResultAdapter.toJson(writer, value_.securityStatus)
    writer.endObject()
  }
}