// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "UNUSED_PARAMETER", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.tangem.domain.walletconnect.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class WcEthSignTypedDataParams_DomainJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<WcEthSignTypedDataParams.Domain>() {
  private val options: JsonReader.Options = JsonReader.Options.of("chainId", "name",
      "verifyingContract", "version")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "chainId")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "name")

  public override fun toString(): String = buildString(53) {
      append("GeneratedJsonAdapter(").append("WcEthSignTypedDataParams.Domain").append(')') }

  public override fun fromJson(reader: JsonReader): WcEthSignTypedDataParams.Domain {
    var chainId: Int? = null
    var name: String? = null
    var verifyingContract: String? = null
    var version: String? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> chainId = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("chainId",
            "chainId", reader)
        1 -> name = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("name", "name",
            reader)
        2 -> verifyingContract = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("verifyingContract", "verifyingContract", reader)
        3 -> version = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("version",
            "version", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return WcEthSignTypedDataParams.Domain(
        chainId = chainId ?: throw Util.missingProperty("chainId", "chainId", reader),
        name = name ?: throw Util.missingProperty("name", "name", reader),
        verifyingContract = verifyingContract ?: throw Util.missingProperty("verifyingContract",
            "verifyingContract", reader),
        version = version ?: throw Util.missingProperty("version", "version", reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: WcEthSignTypedDataParams.Domain?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("chainId")
    intAdapter.toJson(writer, value_.chainId)
    writer.name("name")
    stringAdapter.toJson(writer, value_.name)
    writer.name("verifyingContract")
    stringAdapter.toJson(writer, value_.verifyingContract)
    writer.name("version")
    stringAdapter.toJson(writer, value_.version)
    writer.endObject()
  }
}