// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "UNUSED_PARAMETER", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.tangem.domain.walletconnect.model.legacy

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class AccountJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<Account>() {
  private val options: JsonReader.Options = JsonReader.Options.of("chainId", "walletAddress",
      "derivationPath")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "chainId")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "derivationPath")

  public override fun toString(): String = buildString(29) {
      append("GeneratedJsonAdapter(").append("Account").append(')') }

  public override fun fromJson(reader: JsonReader): Account {
    var chainId: String? = null
    var walletAddress: String? = null
    var derivationPath: String? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> chainId = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("chainId",
            "chainId", reader)
        1 -> walletAddress = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("walletAddress", "walletAddress", reader)
        2 -> derivationPath = nullableStringAdapter.fromJson(reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return Account(
        chainId = chainId ?: throw Util.missingProperty("chainId", "chainId", reader),
        walletAddress = walletAddress ?: throw Util.missingProperty("walletAddress",
            "walletAddress", reader),
        derivationPath = derivationPath
    )
  }

  public override fun toJson(writer: JsonWriter, value_: Account?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("chainId")
    stringAdapter.toJson(writer, value_.chainId)
    writer.name("walletAddress")
    stringAdapter.toJson(writer, value_.walletAddress)
    writer.name("derivationPath")
    nullableStringAdapter.toJson(writer, value_.derivationPath)
    writer.endObject()
  }
}