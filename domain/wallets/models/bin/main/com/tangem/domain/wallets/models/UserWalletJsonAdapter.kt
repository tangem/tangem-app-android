// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "UNUSED_PARAMETER", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.tangem.domain.wallets.models

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.`internal`.Util
import com.tangem.domain.models.scan.ScanResponse
import java.lang.NullPointerException
import kotlin.Boolean
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.Set
import kotlin.collections.emptySet
import kotlin.text.buildString

public class UserWalletJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<UserWallet>() {
  private val options: JsonReader.Options = JsonReader.Options.of("name", "walletId",
      "cardsInWallet", "isMultiCurrency", "hasBackupError", "scanResponse")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "name")

  private val userWalletIdAdapter: JsonAdapter<UserWalletId> =
      moshi.adapter(UserWalletId::class.java, emptySet(), "walletId")

  private val setOfStringAdapter: JsonAdapter<Set<String>> =
      moshi.adapter(Types.newParameterizedType(Set::class.java, String::class.java), emptySet(),
      "cardsInWallet")

  private val booleanAdapter: JsonAdapter<Boolean> = moshi.adapter(Boolean::class.java, emptySet(),
      "isMultiCurrency")

  private val scanResponseAdapter: JsonAdapter<ScanResponse> =
      moshi.adapter(ScanResponse::class.java, emptySet(), "scanResponse")

  public override fun toString(): String = buildString(32) {
      append("GeneratedJsonAdapter(").append("UserWallet").append(')') }

  public override fun fromJson(reader: JsonReader): UserWallet {
    var name: String? = null
    var walletId: UserWalletId? = null
    var cardsInWallet: Set<String>? = null
    var isMultiCurrency: Boolean? = null
    var hasBackupError: Boolean? = null
    var scanResponse: ScanResponse? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> name = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("name", "name",
            reader)
        1 -> walletId = userWalletIdAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("walletId", "walletId", reader)
        2 -> cardsInWallet = setOfStringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("cardsInWallet", "cardsInWallet", reader)
        3 -> isMultiCurrency = booleanAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("isMultiCurrency", "isMultiCurrency", reader)
        4 -> hasBackupError = booleanAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("hasBackupError", "hasBackupError", reader)
        5 -> scanResponse = scanResponseAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("scanResponse", "scanResponse", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return UserWallet(
        name = name ?: throw Util.missingProperty("name", "name", reader),
        walletId = walletId ?: throw Util.missingProperty("walletId", "walletId", reader),
        cardsInWallet = cardsInWallet ?: throw Util.missingProperty("cardsInWallet",
            "cardsInWallet", reader),
        isMultiCurrency = isMultiCurrency ?: throw Util.missingProperty("isMultiCurrency",
            "isMultiCurrency", reader),
        hasBackupError = hasBackupError ?: throw Util.missingProperty("hasBackupError",
            "hasBackupError", reader),
        scanResponse = scanResponse ?: throw Util.missingProperty("scanResponse", "scanResponse",
            reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: UserWallet?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("name")
    stringAdapter.toJson(writer, value_.name)
    writer.name("walletId")
    userWalletIdAdapter.toJson(writer, value_.walletId)
    writer.name("cardsInWallet")
    setOfStringAdapter.toJson(writer, value_.cardsInWallet)
    writer.name("isMultiCurrency")
    booleanAdapter.toJson(writer, value_.isMultiCurrency)
    writer.name("hasBackupError")
    booleanAdapter.toJson(writer, value_.hasBackupError)
    writer.name("scanResponse")
    scanResponseAdapter.toJson(writer, value_.scanResponse)
    writer.endObject()
  }
}